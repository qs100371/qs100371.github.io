<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>the blog of qs</title>
  
  <subtitle>生命不止，折腾不止。</subtitle>
  <link href="https://qs100371.vip/atom.xml" rel="self"/>
  
  <link href="https://qs100371.vip/"/>
  <updated>2025-04-16T07:32:34.388Z</updated>
  <id>https://qs100371.vip/</id>
  
  <author>
    <name>qs100371</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>把md文件和图片资源从gridea迁移到hexo</title>
    <link href="https://qs100371.vip/post/ba-md-wen-jian-he-tu-pian-zi-yuan-cong-gridea-qian-yi-dao-hexo/"/>
    <id>https://qs100371.vip/post/ba-md-wen-jian-he-tu-pian-zi-yuan-cong-gridea-qian-yi-dao-hexo/</id>
    <published>2025-04-16T07:18:52.000Z</published>
    <updated>2025-04-16T07:32:34.388Z</updated>
    
    <content type="html"><![CDATA[<p>gridea用了半年，开始试试hexo。这是一个迁移脚本。</p><span id="more"></span><p>这是deepseek完成的作业。<br><img src="https://qs100371.vip/post-images/1744788456054.png"></p><h1 id="完整脚本"><a href="#完整脚本" class="headerlink" title="完整脚本"></a>完整脚本</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import shutil</span><br><span class="line"></span><br><span class="line">def sync_files(src_dir, dst_dir):</span><br><span class="line">    &quot;&quot;&quot;同步源目录到目标目录（增量模式）&quot;&quot;&quot;</span><br><span class="line">    if not os.path.isdir(src_dir):</span><br><span class="line">        print(f&quot;错误：源目录不存在 &#123;src_dir&#125;&quot;)</span><br><span class="line">        return False</span><br><span class="line">    </span><br><span class="line">    if not os.path.exists(dst_dir):</span><br><span class="line">        print(f&quot;创建目标目录 &#123;dst_dir&#125;&quot;)</span><br><span class="line">        os.makedirs(dst_dir)</span><br><span class="line"></span><br><span class="line">    print(f&quot;正在同步 &#123;src_dir&#125; -&gt; &#123;dst_dir&#125;&quot;)</span><br><span class="line">    </span><br><span class="line">    total = copied = skipped = 0</span><br><span class="line">    </span><br><span class="line">    for root, _, files in os.walk(src_dir):</span><br><span class="line">        for filename in files:</span><br><span class="line">            total += 1</span><br><span class="line">            src_path = os.path.join(root, filename)</span><br><span class="line">            rel_path = os.path.relpath(src_path, src_dir)</span><br><span class="line">            dst_path = os.path.join(dst_dir, rel_path)</span><br><span class="line">            </span><br><span class="line">            # 检查是否需要复制</span><br><span class="line">            if not os.path.exists(dst_path):</span><br><span class="line">                copy_reason = &quot;新文件&quot;</span><br><span class="line">            else:</span><br><span class="line">                # 比较修改时间和文件大小</span><br><span class="line">                src_stat = os.stat(src_path)</span><br><span class="line">                dst_stat = os.stat(dst_path)</span><br><span class="line">                </span><br><span class="line">                if src_stat.st_mtime &gt; dst_stat.st_mtime or src_stat.st_size != dst_stat.st_size:</span><br><span class="line">                    copy_reason = &quot;已更新&quot;</span><br><span class="line">                else:</span><br><span class="line">                    skipped += 1</span><br><span class="line">                    continue</span><br><span class="line">            </span><br><span class="line">            # 确保目标目录存在</span><br><span class="line">            os.makedirs(os.path.dirname(dst_path), exist_ok=True)</span><br><span class="line">            </span><br><span class="line">            # 执行复制</span><br><span class="line">            try:</span><br><span class="line">                shutil.copy2(src_path, dst_path)</span><br><span class="line">                print(f&quot;已复制 (&#123;copy_reason&#125;): &#123;rel_path&#125;&quot;)</span><br><span class="line">                copied += 1</span><br><span class="line">            except Exception as e:</span><br><span class="line">                print(f&quot;复制失败 &#123;rel_path&#125;: &#123;str(e)&#125;&quot;)</span><br><span class="line">    </span><br><span class="line">    print(f&quot;同步完成. 总计: &#123;total&#125;, 已复制: &#123;copied&#125;, 已跳过: &#123;skipped&#125;&quot;)</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 同步图片目录</span><br><span class="line">    sync_files(</span><br><span class="line">        r&quot;E:\documents\Gridea\post-images&quot;,</span><br><span class="line">        r&quot;D:\hexo\blog\source\post-images&quot;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    # 同步文章目录</span><br><span class="line">    sync_files(</span><br><span class="line">        r&quot;E:\documents\Gridea\posts&quot;,</span><br><span class="line">        r&quot;D:\hexo\blog\source\_posts&quot;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>保存为 sync_hexo.py，直接运行。</p><h1 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h1><ul><li>简洁实现：完全去除了日志系统，只保留必要的控制台输出；</li><li>双目录同步：同时处理图片目录和文章目录；</li><li>增量同步：通过比较文件修改时间和大小，只复制有变动的文件；</li><li>自动创建目录：如果目标目录不存在会自动创建；</li><li>错误处理：会捕获并显示复制过程中出现的错误。</li></ul><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>确保源目录路径正确（特别是Gridea的默认路径可能有变化）。</p><blockquote><p>就是任性，用gridea客户端写，用hexo生成网站。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;gridea用了半年，开始试试hexo。这是一个迁移脚本。&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://qs100371.vip/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>从 docker 容器生成 docker-compose yaml 定义</title>
    <link href="https://qs100371.vip/post/cong-docker-rong-qi-sheng-cheng-docker-compose-yaml-ding-yi/"/>
    <id>https://qs100371.vip/post/cong-docker-rong-qi-sheng-cheng-docker-compose-yaml-ding-yi/</id>
    <published>2025-04-15T07:59:01.000Z</published>
    <updated>2025-04-15T08:36:57.766Z</updated>
    
    <content type="html"><![CDATA[<p>经常使用docker，有的是用命令行形式，有的是docker-compose形式，用这个工具可以从容器生成yaml格式的定义。本文记录了用docker方式使用此工具。</p><span id="more"></span><p>项目地址：<a href="https://github.com/Red5d/docker-autocompose">Red5d&#x2F;docker-autocompose</a></p><p>可以通过克隆此存储库并构建映像或使用 GitHub 上自动生成的映像 ，从 Docker 容器使用此工具。</p><h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1><p><code>docker pull ghcr.io/red5d/docker-autocompose:latest</code></p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ul><li>使用新镜像从正在运行的容器或以空格分隔的容器名称或 ID 列表生成 docker-compose 文件：<br><code>docker run --rm -v /var/run/docker.sock:/var/run/docker.sock ghcr.io/red5d/docker-autocompose &lt;container-name-or-id&gt; &lt;additional-names-or-ids&gt;...</code></li></ul><p>输出alist结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">root@onecloud:~# docker run --rm -v /var/run/docker.sock:/var/run/docker.sock ghcr.io/red5d/docker-autocompose alist</span><br><span class="line">services:</span><br><span class="line">  alist:</span><br><span class="line">    command:</span><br><span class="line">      - &quot;/entrypoint.sh&quot;</span><br><span class="line">    container_name: &quot;alist&quot;</span><br><span class="line">    environment:</span><br><span class="line">      - &quot;PUID=0&quot;</span><br><span class="line">      - &quot;PGID=0&quot;</span><br><span class="line">      - &quot;UMASK=022&quot;</span><br><span class="line">      - &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">      - &quot;RUN_ARIA2=false&quot;</span><br><span class="line">    hostname: &quot;7d3b5dccfdba&quot;</span><br><span class="line">    image: &quot;xhofe/alist:latest&quot;</span><br><span class="line">    ipc: &quot;private&quot;</span><br><span class="line">    labels:</span><br><span class="line">      MAINTAINER: &quot;i@nn.ci&quot;</span><br><span class="line">      org.opencontainers.image.created: &quot;2025-03-27T15:49:55.334Z&quot;</span><br><span class="line">      org.opencontainers.image.description: &quot;\U0001F5C2️A file list/WebDAV program that supports multiple\</span><br><span class="line">        \ storages, powered by Gin and Solidjs. / 一个支持多存储的文件列表/WebDAV程序，使用 Gin 和 Solidjs。&quot;</span><br><span class="line">      org.opencontainers.image.licenses: &quot;AGPL-3.0&quot;</span><br><span class="line">      org.opencontainers.image.revision: &quot;0cde4e73d614a4bf0b28872391a13d0f8a6d166a&quot;</span><br><span class="line">      org.opencontainers.image.source: &quot;https://github.com/AlistGo/alist&quot;</span><br><span class="line">      org.opencontainers.image.title: &quot;alist&quot;</span><br><span class="line">      org.opencontainers.image.url: &quot;https://github.com/AlistGo/alist&quot;</span><br><span class="line">      org.opencontainers.image.version: &quot;v3.44.0&quot;</span><br><span class="line">    logging:</span><br><span class="line">      driver: &quot;json-file&quot;</span><br><span class="line">      options: &#123;&#125;</span><br><span class="line">    mac_address: &quot;da:0c:77:9d:52:9d&quot;</span><br><span class="line">    network_mode: &quot;bridge&quot;</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;5244:5244/tcp&quot;</span><br><span class="line">    restart: &quot;unless-stopped&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;/etc/alist:/opt/alist/data&quot;</span><br><span class="line">    working_dir: &quot;/opt/alist/&quot;</span><br><span class="line">version: &quot;3.6&quot;</span><br></pre></td></tr></table></figure><ul><li>以 docker-compose 格式打印出所有容器：<br><code>docker run --rm -v /var/run/docker.sock:/var/run/docker.sock ghcr.io/red5d/docker-autocompose $(docker ps -aq)</code></li></ul><blockquote><p>网络上有一些docker cli和yaml相互转化的工具，但用过之后都不太理想，参数复杂的时候转化的结果都不能用。这个工具生成的内容比正常的yaml多。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;经常使用docker，有的是用命令行形式，有的是docker-compose形式，用这个工具可以从容器生成yaml格式的定义。本文记录了用docker方式使用此工具。&lt;/p&gt;</summary>
    
    
    
    
    <category term="docker" scheme="https://qs100371.vip/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>安装alist</title>
    <link href="https://qs100371.vip/post/an-zhuang-alist/"/>
    <id>https://qs100371.vip/post/an-zhuang-alist/</id>
    <published>2025-04-14T09:37:34.000Z</published>
    <updated>2025-04-14T09:53:28.760Z</updated>
    
    <content type="html"><![CDATA[<p>AList 提供了网页版界面集中管理各大网盘的文件，支持文件上传下载、文件管理、预览图片、查看文档、在线播放音乐、视频等等。AList 网页版可以支持 PC 以及手机浏览器。</p><span id="more"></span><p>项目地址：<a href="https://github.com/AlistGo/alist">AlistGo&#x2F;alist</a><br>网站：<a href="https://alist.nn.ci/zh/">https://alist.nn.ci/zh/</a><br><img src="https://qs100371.vip/post-images/1744623994690.webp"><br>AList 支持后端挂载的存储服务，白嫖上百 TB 的网络资源！支持 WebDAV，直接在线播放，收集网络资源时，也只需保存到网盘里就行，不必真正下载到本地，省时省力。</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><ul><li>docker cli<br><code>docker run -d --restart=unless-stopped -v /etc/alist:/opt/alist/data -p 5244:5244 -e PUID=0 -e PGID=0 -e UMASK=022 --name=&quot;alist&quot; xhofe/alist:latest</code></li><li>docker-compose<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3.3&#x27;</span><br><span class="line">services:</span><br><span class="line">  alist:</span><br><span class="line">    image: &#x27;xhofe/alist:beta&#x27;</span><br><span class="line">    container_name: alist</span><br><span class="line">    volumes:</span><br><span class="line">      - &#x27;/etc/alist:/opt/alist/data&#x27;</span><br><span class="line">    ports:</span><br><span class="line">      - &#x27;5244:5244&#x27;</span><br><span class="line">    environment:</span><br><span class="line">      - PUID=0</span><br><span class="line">      - PGID=0</span><br><span class="line">      - UMASK=022</span><br><span class="line">    restart: unless-stopped</span><br></pre></td></tr></table></figure>从ip:5244访问。<br><img src="https://qs100371.vip/post-images/1744624012530.webp"></li></ul><h1 id="挂载存储"><a href="#挂载存储" class="headerlink" title="挂载存储"></a>挂载存储</h1><p>从首页下方“管理”进入，左侧菜单“存储”，点添加<br><img src="https://qs100371.vip/post-images/1744624111681.webp"><br><img src="https://qs100371.vip/post-images/1744624145543.webp"><br>按要求填写，主要是各网盘需要token或cookie，可按文档中的提示进行操作。<br><img src="https://qs100371.vip/post-images/1744624227650.webp"></p><blockquote><p>添加了百度、迅雷、阿里云和夸克，确实能很方便的访问数据，在线观看一些视频还可以，能看。至于速度，由于都没有会员，只是说能用。百度是第一个挂上去了就又删掉的，速度太慢了。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;AList 提供了网页版界面集中管理各大网盘的文件，支持文件上传下载、文件管理、预览图片、查看文档、在线播放音乐、视频等等。AList 网页版可以支持 PC 以及手机浏览器。&lt;/p&gt;</summary>
    
    
    
    
    <category term="web" scheme="https://qs100371.vip/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Github Actions运行代码并发布到Pages上</title>
    <link href="https://qs100371.vip/post/github-actions-yun-xing-dai-ma-bing-fa-bu-dao-pages/"/>
    <id>https://qs100371.vip/post/github-actions-yun-xing-dai-ma-bing-fa-bu-dao-pages/</id>
    <published>2025-04-11T12:17:15.000Z</published>
    <updated>2025-04-14T07:12:10.372Z</updated>
    
    <content type="html"><![CDATA[<p>前文生成了python代码爬取豆瓣电影信息，得到静态页面，可以创建一个 GitHub Actions 工作流，自动运行 Python 脚本抓取数据，并生成 HTML 页面，然后将其部署到 GitHub Pages 上。</p><span id="more"></span><h1 id="准备GitHub仓库"><a href="#准备GitHub仓库" class="headerlink" title="准备GitHub仓库"></a>准备GitHub仓库</h1><ul><li>创建一个新的 GitHub 仓库（如 douban-movies-nowplaying）。</li><li>将之前的 Python 脚本保存为 main.py（确保它能正确生成 douban_hot_movies.html）。</li><li>添加 requirements.txt 文件，列出依赖：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">requests</span><br><span class="line">beautifulsoup4</span><br></pre></td></tr></table></figure></li></ul><h1 id="创建-GitHub-Actions-工作流"><a href="#创建-GitHub-Actions-工作流" class="headerlink" title="创建 GitHub Actions 工作流"></a>创建 GitHub Actions 工作流</h1><p>在项目根目录创建 .github&#x2F;workflows&#x2F;deploy.yml，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">name: Deploy Douban Movies</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  schedule:</span><br><span class="line">    - cron: &#x27;0 16 * * *&#x27;  # 北京时间每天0点（UTC 16:00）</span><br><span class="line">  workflow_dispatch:      # 允许手动触发</span><br><span class="line">  push:</span><br><span class="line">    branches: [ main ]   # 推送时触发</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    permissions:</span><br><span class="line">      contents: write    # 必需：写入权限</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">      # 步骤1：检出代码</span><br><span class="line">      - name: Checkout</span><br><span class="line">        uses: actions/checkout@v4</span><br><span class="line"></span><br><span class="line">      # 步骤2：设置Python环境</span><br><span class="line">      - name: Set up Python</span><br><span class="line">        uses: actions/setup-python@v4</span><br><span class="line">        with:</span><br><span class="line">          python-version: &quot;3.10&quot;</span><br><span class="line"></span><br><span class="line">      # 步骤3：安装依赖</span><br><span class="line">      - name: Install dependencies</span><br><span class="line">        run: |</span><br><span class="line">          pip install -r requirements.txt</span><br><span class="line">          pip install pytz  # 时区支持</span><br><span class="line"></span><br><span class="line">      # 步骤4：运行爬虫脚本（生成HTML）</span><br><span class="line">      - name: Generate HTML</span><br><span class="line">        run: python main.py</span><br><span class="line"></span><br><span class="line">      # 步骤5：部署到GitHub Pages</span><br><span class="line">      - name: Deploy</span><br><span class="line">        uses: peaceiris/actions-gh-pages@v3</span><br><span class="line">        with:</span><br><span class="line">          github_token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span><br><span class="line">          publish_dir: ./docs       # 推荐使用子目录</span><br><span class="line">          publish_branch: gh-pages      # 部署到gh-pages分支</span><br><span class="line">          force_orphan: true  # 确保分支干净     </span><br></pre></td></tr></table></figure><h1 id="建立gh-pages分支并修改文件生成路径"><a href="#建立gh-pages分支并修改文件生成路径" class="headerlink" title="建立gh-pages分支并修改文件生成路径"></a>建立gh-pages分支并修改文件生成路径</h1><p>python脚本生成的html文件换到docs子目录下。<br>导入<code>import os</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def save_html(html_content, filename=&quot;docs/douban_movies.html&quot;):</span><br><span class="line">    os.makedirs(&quot;docs&quot;, exist_ok=True)</span><br><span class="line">    with open(filename, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:</span><br><span class="line">        f.write(html_content)</span><br></pre></td></tr></table></figure><p>新建gh-pages分支。</p><h1 id="启用-GitHub-Pages"><a href="#启用-GitHub-Pages" class="headerlink" title="启用 GitHub Pages"></a>启用 GitHub Pages</h1><p>进入仓库的 Settings &gt; Pages。<br>选择 部署来源 为 GitHub Actions。</p><h1 id="手动触发首次运行"><a href="#手动触发首次运行" class="headerlink" title="手动触发首次运行"></a>手动触发首次运行</h1><p>提交代码后，进入 Actions 标签页。<br>选择 Deploy Douban Movies 工作流，点击 Run workflow 手动触发。</p><h1 id="访问生成的页面"><a href="#访问生成的页面" class="headerlink" title="访问生成的页面"></a>访问生成的页面</h1><p>工作流运行完成后，访问：<br>https:&#x2F;&#x2F;&lt;GitHub用户名&gt;.github.io&#x2F;douban-movies-nowplaying&#x2F;douban_hot_movies.html<br>示例（html文件名改成了index.html）：<br><a href="http://qs100371.vip/douban-movies-nowplaying/">https://qs100371.vip/douban-movies-nowplaying/</a><br>最终效果：</p><ul><li>自动运行：每天更新豆瓣热映电影数据；</li><li>自动部署：生成 HTML 并发布到 GitHub Pages；</li><li>手动触发：可随时手动更新数据。</li></ul><blockquote><p>还有，数据生成时间是按utc得来的，和东8区差8个小时，ds也给出了修改方法。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line">def get_beijing_time():</span><br><span class="line">    tz = pytz.timezone(&#x27;Asia/Shanghai&#x27;)</span><br><span class="line">    return datetime.now(tz).strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;)</span><br><span class="line"></span><br><span class="line"># 在生成HTML时使用</span><br><span class="line">update_time = get_beijing_time()</span><br></pre></td></tr></table></figure><p>详细代码：<a href="https://github.com/qs100371/douban-movies-nowplaying">qs100371&#x2F;douban-movies-nowplaying</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前文生成了python代码爬取豆瓣电影信息，得到静态页面，可以创建一个 GitHub Actions 工作流，自动运行 Python 脚本抓取数据，并生成 HTML 页面，然后将其部署到 GitHub Pages 上。&lt;/p&gt;</summary>
    
    
    
    
    <category term="web" scheme="https://qs100371.vip/tags/web/"/>
    
    <category term="actions" scheme="https://qs100371.vip/tags/actions/"/>
    
  </entry>
  
  <entry>
    <title>豆瓣热映电影网页生成器</title>
    <link href="https://qs100371.vip/post/dou-ban-re-ying-dian-ying-wang-ye-sheng-cheng-qi/"/>
    <id>https://qs100371.vip/post/dou-ban-re-ying-dian-ying-wang-ye-sheng-cheng-qi/</id>
    <published>2025-04-11T12:00:17.000Z</published>
    <updated>2025-04-14T07:18:47.611Z</updated>
    
    <content type="html"><![CDATA[<p>爱盼项目上显示了豆瓣热映和电视剧等信息，自己也想要一个这样的页面，不会写怎么办，呼叫deepseek生成一个。</p><span id="more"></span><h1 id="生成的代码"><a href="#生成的代码" class="headerlink" title="生成的代码"></a>生成的代码</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">def get_douban_hot_movies():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    从豆瓣获取当前热映电影信息</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    url = &quot;https://movie.douban.com/cinema/nowplaying/&quot;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    try:</span><br><span class="line">        response = requests.get(url, headers=headers)</span><br><span class="line">        response.raise_for_status()</span><br><span class="line">        soup = BeautifulSoup(response.text, &#x27;html.parser&#x27;)</span><br><span class="line">        </span><br><span class="line">        # 豆瓣热映电影信息通常在一个id为&quot;nowplaying&quot;的div中</span><br><span class="line">        nowplaying_div = soup.find(&#x27;div&#x27;, id=&#x27;nowplaying&#x27;)</span><br><span class="line">        if not nowplaying_div:</span><br><span class="line">            return []</span><br><span class="line">            </span><br><span class="line">        movies = []</span><br><span class="line">        for li in nowplaying_div.find_all(&#x27;li&#x27;, class_=&#x27;list-item&#x27;):</span><br><span class="line">            movie = &#123;&#125;</span><br><span class="line">            movie[&#x27;id&#x27;] = li.get(&#x27;id&#x27;, &#x27;&#x27;).strip()</span><br><span class="line">            movie[&#x27;title&#x27;] = li.get(&#x27;data-title&#x27;, &#x27;&#x27;).strip()</span><br><span class="line">            movie[&#x27;score&#x27;] = li.get(&#x27;data-score&#x27;, &#x27;&#x27;).strip()</span><br><span class="line">            movie[&#x27;duration&#x27;] = li.get(&#x27;data-duration&#x27;, &#x27;&#x27;).strip()</span><br><span class="line">            movie[&#x27;region&#x27;] = li.get(&#x27;data-region&#x27;, &#x27;&#x27;).strip()</span><br><span class="line">            movie[&#x27;director&#x27;] = li.get(&#x27;data-director&#x27;, &#x27;&#x27;).strip()</span><br><span class="line">            movie[&#x27;actors&#x27;] = li.get(&#x27;data-actors&#x27;, &#x27;&#x27;).strip()</span><br><span class="line">            movie[&#x27;poster&#x27;] = li.find(&#x27;img&#x27;).get(&#x27;src&#x27;) if li.find(&#x27;img&#x27;) else &#x27;&#x27;</span><br><span class="line">            </span><br><span class="line">            # 获取星级评分（如果有）</span><br><span class="line">            star_rating = li.find(&#x27;span&#x27;, class_=&#x27;subject-rate&#x27;)</span><br><span class="line">            if star_rating:</span><br><span class="line">                movie[&#x27;star_rating&#x27;] = star_rating.get_text().strip()</span><br><span class="line">            else:</span><br><span class="line">                movie[&#x27;star_rating&#x27;] = &#x27;暂无评分&#x27;</span><br><span class="line">                </span><br><span class="line">            movies.append(movie)</span><br><span class="line">            </span><br><span class="line">        return movies</span><br><span class="line">        </span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(f&quot;获取豆瓣热映电影失败: &#123;e&#125;&quot;)</span><br><span class="line">        return []</span><br><span class="line"></span><br><span class="line">def generate_html(movies):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    生成展示热映电影的HTML页面</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    html_template = &quot;&quot;&quot;</span><br><span class="line">    &lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">        &lt;title&gt;豆瓣热映电影&lt;/title&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            body &#123;&#123;</span><br><span class="line">                font-family: &#x27;Helvetica Neue&#x27;, Arial, sans-serif;</span><br><span class="line">                line-height: 1.6;</span><br><span class="line">                color: #333;</span><br><span class="line">                max-width: 1200px;</span><br><span class="line">                margin: 0 auto;</span><br><span class="line">                padding: 20px;</span><br><span class="line">                background-color: #f5f5f5;</span><br><span class="line">            &#125;&#125;</span><br><span class="line">            h1 &#123;&#123;</span><br><span class="line">                text-align: center;</span><br><span class="line">                color: #007722;</span><br><span class="line">                margin-bottom: 30px;</span><br><span class="line">            &#125;&#125;</span><br><span class="line">            .movie-container &#123;&#123;</span><br><span class="line">                display: flex;</span><br><span class="line">                flex-wrap: wrap;</span><br><span class="line">                justify-content: space-around;</span><br><span class="line">                gap: 20px;</span><br><span class="line">            &#125;&#125;</span><br><span class="line">            .movie-card &#123;&#123;</span><br><span class="line">                width: 220px;</span><br><span class="line">                background: white;</span><br><span class="line">                border-radius: 5px;</span><br><span class="line">                overflow: hidden;</span><br><span class="line">                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);</span><br><span class="line">                transition: transform 0.3s;</span><br><span class="line">            &#125;&#125;</span><br><span class="line">            .movie-card:hover &#123;&#123;</span><br><span class="line">                transform: translateY(-5px);</span><br><span class="line">            &#125;&#125;</span><br><span class="line">            .movie-poster &#123;&#123;</span><br><span class="line">                width: 100%;</span><br><span class="line">                height: 300px;</span><br><span class="line">                object-fit: cover;</span><br><span class="line">            &#125;&#125;</span><br><span class="line">            .movie-info &#123;&#123;</span><br><span class="line">                padding: 15px;</span><br><span class="line">            &#125;&#125;</span><br><span class="line">            .movie-title &#123;&#123;</span><br><span class="line">                font-weight: bold;</span><br><span class="line">                font-size: 16px;</span><br><span class="line">                margin-bottom: 5px;</span><br><span class="line">                white-space: nowrap;</span><br><span class="line">                overflow: hidden;</span><br><span class="line">                text-overflow: ellipsis;</span><br><span class="line">            &#125;&#125;</span><br><span class="line">            .movie-meta &#123;&#123;</span><br><span class="line">                font-size: 13px;</span><br><span class="line">                color: #666;</span><br><span class="line">                margin-bottom: 3px;</span><br><span class="line">            &#125;&#125;</span><br><span class="line">            .movie-rating &#123;&#123;</span><br><span class="line">                color: #e09015;</span><br><span class="line">                font-weight: bold;</span><br><span class="line">            &#125;&#125;</span><br><span class="line">            .footer &#123;&#123;</span><br><span class="line">                text-align: center;</span><br><span class="line">                margin-top: 40px;</span><br><span class="line">                color: #999;</span><br><span class="line">                font-size: 14px;</span><br><span class="line">            &#125;&#125;</span><br><span class="line">            @media (max-width: 768px) &#123;&#123;</span><br><span class="line">                .movie-card &#123;&#123;</span><br><span class="line">                    width: 45%;</span><br><span class="line">                &#125;&#125;</span><br><span class="line">            &#125;&#125;</span><br><span class="line">            @media (max-width: 480px) &#123;&#123;</span><br><span class="line">                .movie-card &#123;&#123;</span><br><span class="line">                    width: 100%;</span><br><span class="line">                &#125;&#125;</span><br><span class="line">            &#125;&#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;🎬 豆瓣热映电影&lt;/h1&gt;</span><br><span class="line">        &lt;div class=&quot;movie-container&quot;&gt;</span><br><span class="line">            &#123;movies_html&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">            数据来源: 豆瓣电影 | 更新时间: &#123;update_time&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">    &lt;/html&gt;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    </span><br><span class="line">    from datetime import datetime</span><br><span class="line">    update_time = datetime.now().strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;)</span><br><span class="line">    </span><br><span class="line">    movies_html = &quot;&quot;</span><br><span class="line">    for movie in movies:</span><br><span class="line">        movie_html = f&quot;&quot;&quot;</span><br><span class="line">        &lt;div class=&quot;movie-card&quot;&gt;</span><br><span class="line">            &lt;img class=&quot;movie-poster&quot; src=&quot;&#123;movie.get(&#x27;poster&#x27;, &#x27;&#x27;)&#125;&quot; alt=&quot;&#123;movie.get(&#x27;title&#x27;, &#x27;&#x27;)&#125;&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;movie-info&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;movie-title&quot;&gt;&#123;movie.get(&#x27;title&#x27;, &#x27;&#x27;)&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;movie-meta&quot;&gt;导演: &#123;movie.get(&#x27;director&#x27;, &#x27;未知&#x27;)&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;movie-meta&quot;&gt;主演: &#123;movie.get(&#x27;actors&#x27;, &#x27;未知&#x27;)&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;movie-meta&quot;&gt;地区: &#123;movie.get(&#x27;region&#x27;, &#x27;未知&#x27;)&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;movie-meta&quot;&gt;片长: &#123;movie.get(&#x27;duration&#x27;, &#x27;未知&#x27;)&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;movie-rating&quot;&gt;评分: &#123;movie.get(&#x27;score&#x27;, movie.get(&#x27;star_rating&#x27;, &#x27;暂无评分&#x27;))&#125;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        movies_html += movie_html</span><br><span class="line">    </span><br><span class="line">    full_html = html_template.format(movies_html=movies_html, update_time=update_time)</span><br><span class="line">    return full_html</span><br><span class="line"></span><br><span class="line">def save_html(html_content, filename=&quot;docs/douban_movies.html&quot;):</span><br><span class="line">    os.makedirs(&quot;docs&quot;, exist_ok=True)</span><br><span class="line">    with open(filename, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:</span><br><span class="line">        f.write(html_content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    print(&quot;正在获取豆瓣热映电影信息...&quot;)</span><br><span class="line">    movies = get_douban_hot_movies()</span><br><span class="line">    </span><br><span class="line">    if movies:</span><br><span class="line">        print(f&quot;获取到 &#123;len(movies)&#125; 部热映电影&quot;)</span><br><span class="line">        html_content = generate_html(movies)</span><br><span class="line">        save_html(html_content)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;未能获取热映电影信息&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="脚本需要的Python库"><a href="#脚本需要的Python库" class="headerlink" title="脚本需要的Python库"></a>脚本需要的Python库</h1><ul><li>requests</li><li>beautifulsoup4<br><code>pip install requests beautifulsoup4</code></li></ul><h1 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h1><p>它会：</p><ul><li>从豆瓣电影获取当前热映电影信息；</li><li>解析电影标题、评分、导演、演员、海报等信息；</li><li>生成一个美观的HTML页面展示这些电影；</li><li>将HTML保存为”douban_movies.html”文件。</li></ul><h1 id="添加豆瓣链接和评分星级"><a href="#添加豆瓣链接和评分星级" class="headerlink" title="添加豆瓣链接和评分星级"></a>添加豆瓣链接和评分星级</h1><ul><li><p>在 generate_html() 函数前添加 generate_star_rating() 辅助函数：<br>放在 generate_html() 函数定义之前，作为独立的辅助函数。</p></li><li><p>修改 generate_html() 函数中的电影卡片HTML模板：<br>替换原来的 movie_html 部分。<br>修改部分完整代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">def generate_star_rating(score):</span><br><span class="line">    &quot;&quot;&quot;生成星级评分&quot;&quot;&quot;</span><br><span class="line">    try:</span><br><span class="line">        score = float(score)</span><br><span class="line">        full_stars = int(score // 2)</span><br><span class="line">        half_star = 1 if score % 2 &gt;= 1 else 0</span><br><span class="line">        empty_stars = 5 - full_stars - half_star</span><br><span class="line">        return &#x27;⭐&#x27; * full_stars + &#x27;½&#x27; * half_star + &#x27;☆&#x27; * empty_stars</span><br><span class="line">    except:</span><br><span class="line">        return &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">def generate_html(movies):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    生成展示热映电影的HTML页面</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    html_template = &quot;&quot;&quot;</span><br><span class="line">    &lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">    &lt;!-- 之前的HTML模板保持不变 --&gt;</span><br><span class="line">    &lt;/html&gt;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    </span><br><span class="line">    from datetime import datetime</span><br><span class="line">    update_time = datetime.now().strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;)</span><br><span class="line">    </span><br><span class="line">    movies_html = &quot;&quot;</span><br><span class="line">    for movie in movies:</span><br><span class="line">        movie_html = f&quot;&quot;&quot;</span><br><span class="line">        &lt;div class=&quot;movie-card&quot;&gt;</span><br><span class="line">            &lt;a href=&quot;https://movie.douban.com/subject/&#123;movie.get(&#x27;id&#x27;, &#x27;&#x27;)&#125;/&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">                &lt;img class=&quot;movie-poster&quot; src=&quot;&#123;movie.get(&#x27;poster&#x27;, &#x27;&#x27;)&#125;&quot; alt=&quot;&#123;movie.get(&#x27;title&#x27;, &#x27;&#x27;)&#125;&quot;&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">            &lt;div class=&quot;movie-info&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;movie-title&quot;&gt;</span><br><span class="line">                    &lt;a href=&quot;https://movie.douban.com/subject/&#123;movie.get(&#x27;id&#x27;, &#x27;&#x27;)&#125;/&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">                        &#123;movie.get(&#x27;title&#x27;, &#x27;&#x27;)&#125;</span><br><span class="line">                    &lt;/a&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;movie-meta&quot;&gt;导演: &#123;movie.get(&#x27;director&#x27;, &#x27;未知&#x27;)&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;movie-meta&quot;&gt;主演: &#123;movie.get(&#x27;actors&#x27;, &#x27;未知&#x27;)&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;movie-meta&quot;&gt;地区: &#123;movie.get(&#x27;region&#x27;, &#x27;未知&#x27;)&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;movie-meta&quot;&gt;片长: &#123;movie.get(&#x27;duration&#x27;, &#x27;未知&#x27;)&#125;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;movie-rating&quot;&gt;</span><br><span class="line">                    评分: &#123;movie.get(&#x27;score&#x27;, movie.get(&#x27;star_rating&#x27;, &#x27;暂无评分&#x27;))&#125;</span><br><span class="line">                    &#123;generate_star_rating(movie.get(&#x27;score&#x27;, 0))&#125;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        movies_html += movie_html</span><br><span class="line">    </span><br><span class="line">    full_html = html_template.format(movies_html=movies_html, update_time=update_time)</span><br><span class="line">    return full_html</span><br></pre></td></tr></table></figure></li></ul><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li>豆瓣可能有反爬虫机制，图片会显示不了，可以尝试更换User-Agent或添加延迟<br>添加Referrer Policy（简单方案）<br>在HTML的<head>中添加：<br><code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;</code></li><li>电影信息的HTML结构可能会变化，如果解析失败可能需要调整代码；</li><li>生成的HTML页面是静态的，不会自动更新。</li></ul><p><img src="https://qs100371.vip/post-images/1744373638976.webp"></p><blockquote><p>生成代码很容易，但也要一步一步改进才能得到想要的结果，比自己抠代码要简单多了。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;爱盼项目上显示了豆瓣热映和电视剧等信息，自己也想要一个这样的页面，不会写怎么办，呼叫deepseek生成一个。&lt;/p&gt;</summary>
    
    
    
    
    <category term="web" scheme="https://qs100371.vip/tags/web/"/>
    
    <category term="python" scheme="https://qs100371.vip/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>网盘聚合搜索项目Aipan</title>
    <link href="https://qs100371.vip/post/wang-pan-ju-he-sou-suo-xiang-mu-aipan/"/>
    <id>https://qs100371.vip/post/wang-pan-ju-he-sou-suo-xiang-mu-aipan/</id>
    <published>2025-04-09T07:38:37.000Z</published>
    <updated>2025-04-09T23:41:39.442Z</updated>
    
    <content type="html"><![CDATA[<p>Aipan是一个基于 Vue 和 Nuxt.js 技术构建的开源网盘搜索项目。其主要目标是为用户提供一个能够自主拥有和管理的网盘搜索网站。</p><span id="more"></span><p>项目地址：<a href="https://github.com/unilei/aipan-netdisk-search">unilei&#x2F;aipan-netdisk-search</a><br>Aipan 是一个用户友好的工具，致力于提升网盘资源的可访问性和管理效率。</p><h1 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h1><p>豆瓣热映：展示当前的豆瓣热门影视榜单；<br>影视资源搜索：抓取其它的网站的内容，实现网盘资源聚合搜索；<br>音乐搜索：基于开源项目的酷我音乐搜索下载。</p><h1 id="快速部署"><a href="#快速部署" class="headerlink" title="快速部署"></a>快速部署</h1><p><code>curl -fsSL https://r2cf.aipan.me/deploy/quick-install.sh | sudo bash</code>   一键部署脚本</p><blockquote><p>一键部署不能使用的，可用wget下载文件，再执行。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://r2cf.aipan.me/deploy/quick-install.sh</span><br><span class="line">sudo bash ./quick-install.sh</span><br></pre></td></tr></table></figure><p>从ip:3000访问。<br>豆瓣热映<br><img src="https://qs100371.vip/post-images/1744184903257.webp"><br>热门电视<br><img src="https://qs100371.vip/post-images/1744184907811.webp"><br>国产剧<br><img src="https://qs100371.vip/post-images/1744184911590.webp"><br>综艺<br><img src="https://qs100371.vip/post-images/1744184916229.webp"><br>美剧<br><img src="https://qs100371.vip/post-images/1744184920315.webp"><br>日剧<br><img src="https://qs100371.vip/post-images/1744184924193.webp"><br>韩剧<br><img src="https://qs100371.vip/post-images/1744184930251.webp"><br>纪录片<br><img src="https://qs100371.vip/post-images/1744184939178.webp"></p><blockquote><p>搜索结果中有百度网盘，夸克网盘和迅雷云盘内容，由于都没有会员，只能保存到迅雷云盘中，用166k的低速慢慢下。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;Aipan是一个基于 Vue 和 Nuxt.js 技术构建的开源网盘搜索项目。其主要目标是为用户提供一个能够自主拥有和管理的网盘搜索网站。&lt;/p&gt;</summary>
    
    
    
    
    <category term="web" scheme="https://qs100371.vip/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>安装AdGuard Home</title>
    <link href="https://qs100371.vip/post/an-zhuang-adguard-home/"/>
    <id>https://qs100371.vip/post/an-zhuang-adguard-home/</id>
    <published>2025-04-08T08:58:42.000Z</published>
    <updated>2025-04-09T23:38:49.998Z</updated>
    
    <content type="html"><![CDATA[<p>AdGuard Home 是免费且开源，强大的全网广告和跟踪器阻止 DNS 服务器。本文详细记录了安装方法。</p><span id="more"></span><p>项目地址：<a href="https://github.com/AdguardTeam/AdGuardHome">AdguardTeam&#x2F;AdGuardHome</a><br>AdGuard Home 作为 DNS 服务器运行，将跟踪域重新路由到“黑洞”，从而防止设备连接到这些服务器。</p><h1 id="自动安装"><a href="#自动安装" class="headerlink" title="自动安装"></a>自动安装</h1><p><code>curl -s -S -L https://raw.githubusercontent.com/AdguardTeam/AdGuardHome/master/scripts/install.sh | sh -s -- -v</code></p><h1 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker pull adguard/adguardhome</span><br><span class="line">mkdir /etc/AdGuard_Home</span><br><span class="line">docker run --name AdGuard_Home \</span><br><span class="line">      -v /etc/AdGuard_Home/:/opt/adguardhome/work \</span><br><span class="line">       -v /etc/AdGuard_Home/:/opt/adguardhome/conf \</span><br><span class="line">       -p 53:53/tcp -p 53:53/udp -p 67:67/udp -p 70:68/tcp -p 70:68/udp \</span><br><span class="line">       -p 3001:80/tcp -p 446:443/tcp -p 853:853/tcp \</span><br><span class="line">       -p 3000:3000/tcp --restart=always -d adguard/adguardhome</span><br></pre></td></tr></table></figure><p>各参数意义详见：<a href="https://hub.docker.com/r/adguard/adguardhome">https://hub.docker.com/r/adguard/adguardhome</a></p><h1 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h1><p>从ip:3000访问，并设置。</p><ul><li>DNS 服务器推荐<br>不同地区连接至 DNS 服务器的速度各有差异，各位可以通过 Ping 测速的方式寻找当地连接延迟最低的 DNS 服务器。更多 DNS 服务器可以在 AdGuard 文档中找到。</li></ul><table><thead><tr><th>DNS 提供商</th><th>地址</th></tr></thead><tbody><tr><td>阿里</td><td>223.5.5.5</td></tr><tr><td>DNSPod</td><td>119.29.29.29</td></tr></tbody></table><ul><li>添加过滤规则<br>为了更好地发挥 AdGuard Home 去广告的功能，仅依靠默认的过滤规则是不够的，但也不宜过多，过多的过滤规则会影响解析的速度，可以根据需要添加过滤规则。</li></ul><h1 id="替换设备-DNS"><a href="#替换设备-DNS" class="headerlink" title="替换设备 DNS"></a>替换设备 DNS</h1><p>完成 AdGuard Home 的设置后，便可将 AdGuard Home 的 DNS 地址部署到局域网设备上。可以在路由器上把DHCP的DNS1设为此IP，DNS2设成原路由器地址。<br><img src="https://qs100371.vip/post-images/1744103652506.webp"><br><img src="https://qs100371.vip/post-images/1744103657904.webp"><br><img src="https://qs100371.vip/post-images/1744103662460.webp"><br><img src="https://qs100371.vip/post-images/1744103666466.webp"><br><img src="https://qs100371.vip/post-images/1744103670720.webp"><br>参考：<br><a href="https://sspai.com/post/63088"><em>AdGuard Home 安装及使用指北</em></a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;AdGuard Home 是免费且开源，强大的全网广告和跟踪器阻止 DNS 服务器。本文详细记录了安装方法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="web" scheme="https://qs100371.vip/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>网易爆米花：观影好助手</title>
    <link href="https://qs100371.vip/post/wang-yi-bao-mi-hua-guan-ying-hao-zhu-shou/"/>
    <id>https://qs100371.vip/post/wang-yi-bao-mi-hua-guan-ying-hao-zhu-shou/</id>
    <published>2025-03-31T10:52:12.000Z</published>
    <updated>2025-04-02T08:38:51.725Z</updated>
    
    <content type="html"><![CDATA[<p>网易爆米花是一款聚合型视频播放器，自动归类影片，聚合电视剧季和集。无需下载视频，即可在线播放4K超清视频，支持超200种音视频字幕编码，几乎可以播放所有主流格式的视频。</p><span id="more"></span><p>项目地址：<a href="https://bmh.163.com/">https://bmh.163.com/</a><br><img src="https://qs100371.vip/post-images/1743418744294.webp"><br><img src="https://qs100371.vip/post-images/1743418749726.webp"></p><h1 id="电视版效果"><a href="#电视版效果" class="headerlink" title="电视版效果"></a>电视版效果</h1><p><img src="https://qs100371.vip/post-images/1743419329567.webp"><br><img src="https://qs100371.vip/post-images/1743419357614.webp"><br><img src="https://qs100371.vip/post-images/1743419361756.webp"><br><img src="https://qs100371.vip/post-images/1743419366000.webp"></p><h1 id="手机版效果"><a href="#手机版效果" class="headerlink" title="手机版效果"></a>手机版效果</h1><p><img src="https://qs100371.vip/post-images/1743419390298.webp"><br><img src="https://qs100371.vip/post-images/1743419395747.webp"><br><img src="https://qs100371.vip/post-images/1743419399786.webp"><br><img src="https://qs100371.vip/post-images/1743419403559.webp"></p><blockquote><p>很好用，刮削视频信息无需梯子（jellyfin哭了），手机和安卓电视都可以用。缺点也有，没有服务器端，本地视频源无法远程播放。原来的极光盒子2代（全志h6)已经不能播放本地视频，新换成极光6代（全志h618)就都可以了，开机也流畅了，有线连接终究比无线好。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;网易爆米花是一款聚合型视频播放器，自动归类影片，聚合电视剧季和集。无需下载视频，即可在线播放4K超清视频，支持超200种音视频字幕编码，几乎可以播放所有主流格式的视频。&lt;/p&gt;</summary>
    
    
    
    
    <category term="web" scheme="https://qs100371.vip/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Homeassistant接入国家电网用电数据</title>
    <link href="https://qs100371.vip/post/homeassistant-jie-ru-guo-jia-dian-wang-yong-dian-shu-ju/"/>
    <id>https://qs100371.vip/post/homeassistant-jie-ru-guo-jia-dian-wang-yong-dian-shu-ju/</id>
    <published>2025-03-31T10:16:18.000Z</published>
    <updated>2025-04-11T13:08:39.298Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录了将电网数据接入HA的方法。</p><span id="more"></span><p>项目地址：<a href="https://github.com/ARC-MX/sgcc_electricity_new">HomeAssistant 国家电网电费查询：ARC-MX&#x2F;sgcc_electricity_new</a></p><p>可以帮助将国网的电费、用电量数据接入homeassistant，实现实时追踪家庭用电量情况；并且可以将每日用电量保存到数据库，历史有迹可循。<br>在homeassistant以实体显示：</p><table><thead><tr><th>实体entity_id</th><th>说明</th></tr></thead><tbody><tr><td>sensor.last_electricity_usage_xxxx</td><td>最近一天用电量，单位KWH、度。</td></tr><tr><td>sensor.electricity_charge_balance_xxxx</td><td>预付费显示电费余额，反之显示上月应交电费，单位元。</td></tr><tr><td>sensor.yearly_electricity_usage_xxxx</td><td>今年总用电量，单位KWH、度。</td></tr><tr><td>sensor.yearly_electricity_charge_xxxx</td><td>今年总用电费，单位元。</td></tr><tr><td>sensor.month_electricity_usage_xxxx</td><td>最近一个月用电量，单位KWH、度。</td></tr><tr><td>sensor.month_electricity_charge_xxxx</td><td>上月总用电费，单位元。</td></tr></tbody></table><ul><li>适用范围<br>适用于除广东、广西、云南、贵州、海南等省份的用户外，均可使用本应用获取电力、电费数据。</li><li>实现流程<br>通过python的selenium包获取国家电网的数据，通过homeassistant的提供的REST API将采用POST请求将实体状态更新到homeassistant。</li></ul><p>安装与部署</p><h1 id="注册国家电网账户"><a href="#注册国家电网账户" class="headerlink" title="注册国家电网账户"></a>注册国家电网账户</h1><p>首先要注册国家电网账户，绑定电表，并且可以手动查询电量，需要手机号和登录密码。<br>注册网址：<a href="https://www.95598.cn/osgweb/login">https://www.95598.cn/osgweb/login</a></p><h1 id="获取HA-token"><a href="#获取HA-token" class="headerlink" title="获取HA token"></a>获取HA token</h1><p><img src="https://qs100371.vip/post-images/1743417138110.webp"></p><h1 id="docker镜像部署"><a href="#docker镜像部署" class="headerlink" title="docker镜像部署"></a>docker镜像部署</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ARC-MX/sgcc_electricity_new.git</span><br><span class="line"># 如果github网络环境不好的话可以使用国内镜像，完全同步的，个人推荐使用国内镜像</span><br><span class="line"># git clone https://gitee.com/ARC-MX/sgcc_electricity_new.git</span><br><span class="line">cd sgcc_electricity_new</span><br><span class="line"></span><br><span class="line">cp example.env .env # 创建环境变量文件</span><br><span class="line">nano .env</span><br></pre></td></tr></table></figure><p>参考：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">### 以下项都需要修改</span><br><span class="line">## 国网登录信息</span><br><span class="line"># 修改为自己的登录账号</span><br><span class="line">PHONE_NUMBER=&quot;xxx&quot; </span><br><span class="line"># 修改为自己的登录密码</span><br><span class="line">PASSWORD=&quot;xxxx&quot; </span><br><span class="line"># 排除指定用户ID，如果出现一些不想检测的ID或者有些充电、发电帐号、可以使用这个环境变量，如果有多个就用&quot;,&quot;分隔，&quot;,&quot;之间不要有空格</span><br><span class="line">IGNORE_USER_ID=xxxxxxx,xxxxxxx,xxxxxxx</span><br><span class="line"></span><br><span class="line"># SQLite 数据库配置</span><br><span class="line"># or False 不启用数据库储存每日用电量数据。</span><br><span class="line">ENABLE_DATABASE_STORAGE=True</span><br><span class="line"># 数据库名，默认为homeassistant</span><br><span class="line">DB_NAME=&quot;homeassistant.db&quot;</span><br><span class="line"># COLLECTION_NAME默认为electricity_daily_usage_&#123;国网用户id&#125;，不支持修改。</span><br><span class="line"></span><br><span class="line">## homeassistant配置</span><br><span class="line"># 改为你的localhost为你的homeassistant地址</span><br><span class="line">HASS_URL=&quot;http://localhost:8123/&quot; </span><br><span class="line"># homeassistant的长期令牌</span><br><span class="line">HASS_TOKEN=&quot;eyxxxxx&quot;</span><br><span class="line"></span><br><span class="line">## selenium运行参数</span><br><span class="line"># 任务开始时间，24小时制，例如&quot;07:00”则为每天早上7点执行，第一次启动程序如果时间晚于早上7点则会立即执行一次，每隔12小时执行一次。</span><br><span class="line">JOB_START_TIME=&quot;07:00&quot;</span><br><span class="line"># 每次操作等待时间，推荐设定范围为[2,30]，该值表示每次点击网页后所要等待数据加载的时间，如果出现“no such element”诸如此类的错误可适当调大该值，如果硬件性能较好可以适当调小该值</span><br><span class="line">RETRY_WAIT_TIME_OFFSET_UNIT=15</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 记录的天数, 仅支持填写 7 或 30</span><br><span class="line"># 国网原本可以记录 30 天,现在不开通智能缴费只能查询 7 天造成错误</span><br><span class="line">DATA_RETENTION_DAYS=7</span><br><span class="line"></span><br><span class="line">## 余额提醒</span><br><span class="line"># 是否缴费提醒</span><br><span class="line">RECHARGE_NOTIFY=Flase</span><br><span class="line"># 余额</span><br><span class="line">BALANCE=5.0</span><br><span class="line"># pushplus token 如果有多个就用&quot;,&quot;分隔，&quot;,&quot;之间不要有空格，单个就不要有&quot;,&quot;</span><br><span class="line">PUSHPLUS_TOKEN=xxxxxxx,xxxxxxx,xxxxxxx</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">运行获取传感器名称</span><br><span class="line">docker-compose up -d</span><br><span class="line">docker-compose logs sgcc_electricity_app</span><br></pre></td></tr></table></figure><p>成功的话，日志应该是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">2025-03-31 16:36:23  [INFO    ] ---- Homeassistant sensor sensor.month_electricity_charge_7787 state updated: 104.52 CNY</span><br><span class="line">2025-03-31 16:36:23  [INFO    ] ---- User xxxxxx3667787 state-refresh task run successfully!</span><br><span class="line">2025-03-31 16:37:43  [INFO    ] ---- Get electricity charge balance for 1601356178519 successfully, balance is 131.3 CNY.</span><br><span class="line">2025-03-31 16:39:19  [INFO    ] ---- Get year power usage for xxxxxx6178519 successfully, usage is 141 kwh</span><br><span class="line">2025-03-31 16:39:19  [INFO    ] ---- Get year power charge for xxxxxx6178519 successfully, yealrly charge is 73.32 CNY</span><br><span class="line">2025-03-31 16:39:34  [INFO    ] ---- Get month power charge for xxxxxx6178519 successfully, 2025-01-01-2025-01-31 usage is 73 KWh, charge is 37.96 CNY.</span><br><span class="line">2025-03-31 16:39:34  [INFO    ] ---- Get month power charge for xxxxxx6178519 successfully, 2025-02-01-2025-02-28 usage is 68 KWh, charge is 35.36 CNY.</span><br><span class="line">2025-03-31 16:39:49  [INFO    ] ---- Get daily power consumption for 1601356178519 successfully, , 2025-03-30 usage is 1.95 kwh.</span><br><span class="line">2025-03-31 16:39:49  [INFO    ] ---- enable_database_storage is true, we will store the data to the database.</span><br><span class="line">2025-03-31 16:40:20  [INFO    ] ---- Database of /data/homeassistant.db created successfully.</span><br><span class="line">2025-03-31 16:40:20  [INFO    ] ---- Table dailyxxxxxx6178519 created successfully</span><br><span class="line">2025-03-31 16:40:20  [INFO    ] ---- Table dataxxxxxx6178519 created successfully</span><br><span class="line">2025-03-31 16:40:20  [INFO    ] ---- The electricity consumption of 1.95KWh on 2025-03-30 has been successfully deposited into the database</span><br><span class="line">2025-03-31 16:40:20  [INFO    ] ---- The electricity consumption of 2.45KWh on 2025-03-29 has been successfully deposited into the database</span><br><span class="line">2025-03-31 16:40:20  [INFO    ] ---- The electricity consumption of 2.77KWh on 2025-03-28 has been successfully deposited into the database</span><br><span class="line">2025-03-31 16:40:20  [INFO    ] ---- The electricity consumption of 1.76KWh on 2025-03-27 has been successfully deposited into the database</span><br><span class="line">2025-03-31 16:40:20  [INFO    ] ---- The electricity consumption of 2.52KWh on 2025-03-26 has been successfully deposited into the database</span><br><span class="line">2025-03-31 16:40:20  [INFO    ] ---- The electricity consumption of 2.1KWh on 2025-03-25 has been successfully deposited into the database</span><br><span class="line">2025-03-31 16:40:20  [INFO    ] ---- The electricity consumption of 2.74KWh on 2025-03-24 has been successfully deposited into the database</span><br><span class="line">2025-03-31 16:40:20  [INFO    ] ---- Check the electricity bill balance, the notification will be sent = False</span><br></pre></td></tr></table></figure><h1 id="HA中的显示"><a href="#HA中的显示" class="headerlink" title="HA中的显示"></a>HA中的显示</h1><p>样式1<br><img src="https://qs100371.vip/post-images/1743417165061.webp"><br>样式2<br>结合mini-graph-card 和mushroom实现美化效果（在hacs上安装）：<br><img src="https://qs100371.vip/post-images/1743583264287.webp"></p><h1 id="电费不足通知"><a href="#电费不足通知" class="headerlink" title="电费不足通知"></a>电费不足通知</h1><p>电费余额不足提醒，在.env里设置提醒余额。目前是用pushplus的方案，注册pushplus，获取token。通知给谁就让谁注册并将token填到.env中。</p><h1 id="修改configuration-yaml文件"><a href="#修改configuration-yaml文件" class="headerlink" title="修改configuration.yaml文件"></a>修改configuration.yaml文件</h1><p>由于是API方式传递传感器数据，要想重启ha实体ID可用，必须配置如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">template:</span><br><span class="line">  - trigger:</span><br><span class="line">      - platform: event</span><br><span class="line">        event_type: state_changed</span><br><span class="line">        event_data:</span><br><span class="line">          entity_id: sensor.electricity_charge_balance_xxxx</span><br><span class="line">    sensor:</span><br><span class="line">      - name: electricity_charge_balance_xxxx</span><br><span class="line">        unique_id: electricity_charge_balance_xxxx</span><br><span class="line">        state: &quot;&#123;&#123; states(&#x27;sensor.electricity_charge_balance_xxxx&#x27;) &#125;&#125;&quot;</span><br><span class="line">        state_class: total</span><br><span class="line">        unit_of_measurement: &quot;CNY&quot;</span><br><span class="line">        device_class: monetary</span><br><span class="line"></span><br><span class="line">  - trigger:</span><br><span class="line">      - platform: event</span><br><span class="line">        event_type: state_changed</span><br><span class="line">        event_data:</span><br><span class="line">          entity_id: sensor.last_electricity_usage_xxxx</span><br><span class="line">    sensor:</span><br><span class="line">      - name: last_electricity_usage_xxxx</span><br><span class="line">        unique_id: last_electricity_usage_xxxx</span><br><span class="line">        state: &quot;&#123;&#123; states(&#x27;sensor.last_electricity_usage_xxxx&#x27;) &#125;&#125;&quot;</span><br><span class="line">        state_class: measurement</span><br><span class="line">        unit_of_measurement: &quot;kWh&quot;</span><br><span class="line">        device_class: energy</span><br><span class="line"></span><br><span class="line">  - trigger:</span><br><span class="line">      - platform: event</span><br><span class="line">        event_type: state_changed</span><br><span class="line">        event_data:</span><br><span class="line">          entity_id: sensor.month_electricity_usage_xxxx</span><br><span class="line">    sensor:</span><br><span class="line">      - name: month_electricity_usage_xxxx</span><br><span class="line">        unique_id: month_electricity_usage_xxxx</span><br><span class="line">        state: &quot;&#123;&#123; states(&#x27;sensor.month_electricity_usage_xxxx&#x27;) &#125;&#125;&quot;</span><br><span class="line">        state_class: measurement</span><br><span class="line">        unit_of_measurement: &quot;kWh&quot;</span><br><span class="line">        device_class: energy</span><br><span class="line"></span><br><span class="line">  - trigger:</span><br><span class="line">      - platform: event</span><br><span class="line">        event_type: state_changed</span><br><span class="line">        event_data:</span><br><span class="line">          entity_id: sensor.month_electricity_charge_xxxx</span><br><span class="line">    sensor:</span><br><span class="line">      - name: month_electricity_charge_xxxx</span><br><span class="line">        unique_id: month_electricity_charge_xxxx</span><br><span class="line">        state: &quot;&#123;&#123; states(&#x27;sensor.month_electricity_charge_xxxx&#x27;) &#125;&#125;&quot;</span><br><span class="line">        state_class: measurement</span><br><span class="line">        unit_of_measurement: &quot;CNY&quot;</span><br><span class="line">        device_class: monetary</span><br><span class="line"></span><br><span class="line">  - trigger:</span><br><span class="line">      - platform: event</span><br><span class="line">        event_type: state_changed</span><br><span class="line">        event_data:</span><br><span class="line">          entity_id: sensor.yearly_electricity_usage_xxxx</span><br><span class="line">    sensor:</span><br><span class="line">      - name: yearly_electricity_usage_xxxx</span><br><span class="line">        unique_id: yearly_electricity_usage_xxxx</span><br><span class="line">        state: &quot;&#123;&#123; states(&#x27;sensor.yearly_electricity_usage_xxxx&#x27;) &#125;&#125;&quot;</span><br><span class="line">        state_class: total_increasing</span><br><span class="line">        unit_of_measurement: &quot;kWh&quot;</span><br><span class="line">        device_class: energy</span><br><span class="line"></span><br><span class="line">  - trigger:</span><br><span class="line">      - platform: event</span><br><span class="line">        event_type: state_changed</span><br><span class="line">        event_data:</span><br><span class="line">          entity_id: sensor.yearly_electricity_charge_xxxx</span><br><span class="line">    sensor:</span><br><span class="line">      - name: yearly_electricity_charge_xxxx</span><br><span class="line">        unique_id: yearly_electricity_charge_xxxx</span><br><span class="line">        state: &quot;&#123;&#123; states(&#x27;sensor.yearly_electricity_charge_xxxx&#x27;) &#125;&#125;&quot;</span><br><span class="line">        state_class: total_increasing</span><br><span class="line">        unit_of_measurement: &quot;CNY&quot;</span><br><span class="line">        device_class: monetary</span><br></pre></td></tr></table></figure><p>xxxx是log中的_xxxx后缀。<br>configuration.yaml在homeassistant配置目录下，也就是docker挂载的目录。<br>修改后重启ha，就不会出现传感器无效的提示。</p><blockquote><p>在HA当中改变显示样式太复杂了，没学会。电网的数据更新很慢，每天下午才会刷新前一天的数据。<del>发现一个问题，ha的docker一重启数据就没了。（已解决）</del></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文记录了将电网数据接入HA的方法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="web" scheme="https://qs100371.vip/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>给Valine添加邮件提醒功能</title>
    <link href="https://qs100371.vip/post/gei-valine-tian-jia-you-jian-ti-xing-gong-neng/"/>
    <id>https://qs100371.vip/post/gei-valine-tian-jia-you-jian-ti-xing-gong-neng/</id>
    <published>2025-03-25T07:05:15.000Z</published>
    <updated>2025-03-31T10:16:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Valine是一款基于LeanCloud的快速、简洁且高效的无后端评论系统。本文记录了使用第三方邮件提醒：<br>valine-admin的过程。</p><span id="more"></span><p>项目地址：<a href="https://github.com/wiidede/Valine-Admin">wiidede&#x2F;Valine-Admin</a></p><p>此项目是一个对 Valine 评论系统的拓展应用，可增强 Valine 的邮件通知功能。基于 Leancloud 的云引擎与云函数。可以提供邮件 通知站长 和 @ 通知 的功能，而且还支持自定义邮件通知模板。</p><blockquote><p>Valine官方支持上写的Valine-Admin (by @zhaojun1998)，经试验并不能成功部署。方法是七年前更新的，现在已经不能用了。</p></blockquote><h1 id="确保Valine-的基础功能正常"><a href="#确保Valine-的基础功能正常" class="headerlink" title="确保Valine 的基础功能正常"></a>确保Valine 的基础功能正常</h1><p>参考 <a href="https://valine.js.org/">Valine Docs</a></p><h1 id="进入-Leancloud-对应的-Valine-应用"><a href="#进入-Leancloud-对应的-Valine-应用" class="headerlink" title="进入 Leancloud 对应的 Valine 应用"></a>进入 Leancloud 对应的 Valine 应用</h1><p>点击云引擎-管理部署-创建分组，分组名称“valine”，选中“免费版”，创建。<br>点git部署，地址：<a href="https://github.com/wiidede/Valine-Admin%EF%BC%8C%E5%88%86%E6%94%AF%E5%A1%ABmaster%EF%BC%8C%E7%82%B9%E9%83%A8%E7%BD%B2%E3%80%82">https://github.com/wiidede/Valine-Admin，分支填master，点部署。</a><br><img src="https://qs100371.vip/post-images/1742888646207.webp"><br><img src="https://qs100371.vip/post-images/1742888654992.webp"><br><img src="https://qs100371.vip/post-images/1742888687914.webp"><br><img src="https://qs100371.vip/post-images/1742888758425.webp"></p><h1 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h1><p>设置云引擎的环境变量以提供必要的信息。</p><table><thead><tr><th>变量</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>SITE_NAME</td><td>xxxxxx</td><td>[必填]博客名称</td></tr><tr><td>SITE_URL</td><td><a href="https://xxxxxx.com/">https://xxxxxx.com</a></td><td>[必填]首页地址</td></tr><tr><td>SMTP_SERVICE</td><td>163</td><td>[新版支持]邮件服务提供商，支持 QQ、163、126、Gmail</td></tr><tr><td>SMTP_USER</td><td><a href="mailto:&#120;&#120;&#x78;&#120;&#120;&#120;&#64;&#x31;&#x36;&#51;&#46;&#99;&#111;&#x6d;">&#120;&#120;&#x78;&#120;&#120;&#120;&#64;&#x31;&#x36;&#51;&#46;&#99;&#111;&#x6d;</a></td><td>[必填]SMTP登录用户</td></tr><tr><td>SMTP_PASS</td><td>ccxxxxxxxxch</td><td>[必填]SMTP登录密码或授权码（163邮箱需要获取授权码）</td></tr><tr><td>SENDER_NAME</td><td>xxxxxx</td><td>[必填]发件人</td></tr><tr><td>TEMPLATE_NAME</td><td>rainbow</td><td>邮件模板，分别为默认主题和 rainbow 彩虹主题</td></tr></tbody></table><p>保存之后，重启云引擎。<br><img src="https://qs100371.vip/post-images/1742888794426.webp"></p><h1 id="试验"><a href="#试验" class="headerlink" title="试验"></a>试验</h1><p>在Valine里留言并留下邮箱，再查看邮箱，果然有提醒。<br>邮件样式：<br><img src="https://qs100371.vip/post-images/1742888842618.webp"><br>查看日志：<br><img src="https://qs100371.vip/post-images/1742888803910.webp"><br><img src="https://qs100371.vip/post-images/1742888829505.webp"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Valine是一款基于LeanCloud的快速、简洁且高效的无后端评论系统。本文记录了使用第三方邮件提醒：&lt;br&gt;valine-admin的过程。&lt;/p&gt;</summary>
    
    
    
    
    <category term="web" scheme="https://qs100371.vip/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>安装homeassistant</title>
    <link href="https://qs100371.vip/post/an-zhuang-homeassistant/"/>
    <id>https://qs100371.vip/post/an-zhuang-homeassistant/</id>
    <published>2025-03-22T03:51:52.000Z</published>
    <updated>2025-03-25T07:05:13.434Z</updated>
    
    <content type="html"><![CDATA[<p>Home Assistant把家中的智能家居设备整合到HA中，它能够接入的设备非常的多比如大名鼎鼎的小米、博联、易微联、飞利浦、特斯拉…，也可以接入软件，然后让各个品牌之间的设备可以联网。本文记录了docker安装方式。</p><span id="more"></span><p><img src="https://qs100371.vip/post-images/1742615884129.webp"><br>一个设备，在没接入HA之前，它是个单一设备，只能在自己的生态里面联动，一旦接入到HA上，它就活了，它可以在所有接入的平台里面自己联动，实现各种各样的自动化。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>有虚拟机方式和docker方式。</p><ul><li>docker cli<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name homeassistant \</span><br><span class="line">  --privileged \</span><br><span class="line">  --restart=unless-stopped \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -v /data/homeassistant:/config \</span><br><span class="line">  -v /run/dbus:/run/dbus:ro \</span><br><span class="line">  --network=host \</span><br><span class="line">  ghcr.io/home-assistant/home-assistant:stable</span><br></pre></td></tr></table></figure></li><li>docker-compose.yml<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">services:</span><br><span class="line">homeassistant:</span><br><span class="line">  container_name: homeassistant</span><br><span class="line">  image: &quot;ghcr.io/home-assistant/home-assistant:stable&quot;</span><br><span class="line">  volumes:</span><br><span class="line">    - //data/homeassistant:/config</span><br><span class="line">    - /etc/localtime:/etc/localtime:ro</span><br><span class="line">    - /run/dbus:/run/dbus:ro</span><br><span class="line">  restart: unless-stopped</span><br><span class="line">  privileged: true</span><br><span class="line">  network_mode: host</span><br></pre></td></tr></table></figure>从ip:8123访问。<br><img src="https://qs100371.vip/post-images/1742615894180.webp"><br><img src="https://qs100371.vip/post-images/1742615899912.webp"><br><img src="https://qs100371.vip/post-images/1742615904818.webp"><br><img src="https://qs100371.vip/post-images/1742615922959.webp"><br><img src="https://qs100371.vip/post-images/1742615943835.webp"><br><img src="https://qs100371.vip/post-images/1742615951979.webp"><br><img src="https://qs100371.vip/post-images/1742616002016.webp"></li></ul><h1 id="安装hacs-极速版"><a href="#安装hacs-极速版" class="headerlink" title="安装hacs 极速版"></a>安装hacs 极速版</h1><p>HACS是一款优秀的 Home Assistant 集成商店，然而国人想要使用它下载插件或前端卡片却困难重重，主要原因就是国内的网络环境。 极速版项目使用了gitmirror.com和fastgit.org等提供的Github代理服务，可以让大家更快的下载商店里的插件。</p><ul><li>ssh登陆宿主机后，并cd进入到HA配置目录再执行安装命令<br><code>wget -O - https://get.hacs.vip | bash -</code>  # 或<br><code>curl -fsSL get.hacs.vip | bash</code></li><li>下载安装<br><a href="https://github.com/hacs-china/integration/releases/latest/download/hacs.zip">https://github.com/hacs-china/integration/releases/latest/download/hacs.zip</a> 下载并解压，放到-v参数后面映射的目录下custom_components&#x2F;hacs文件夹，重启ha。<br>在“设置-设备与服务”里点“添加集成”，添加Xiaomi Miot Auto，登录小米帐号，把米家的设备添加进来。<br><img src="https://qs100371.vip/post-images/1742729169770.webp"><br><img src="https://qs100371.vip/post-images/1742729175179.webp"><br><img src="https://qs100371.vip/post-images/1742729180840.webp"><br><img src="https://qs100371.vip/post-images/1742729185032.webp"></li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p><del>？现在还没有能接入的设备，有了再继续研究…</del></p><blockquote><p>类似于华为手机上的智慧生活，曾经用来定时开关监控摄像头。现在也只接入了一个wifi插座，便于远程控制主机开关，因为风扇有点吵，晚上得关机。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;Home Assistant把家中的智能家居设备整合到HA中，它能够接入的设备非常的多比如大名鼎鼎的小米、博联、易微联、飞利浦、特斯拉…，也可以接入软件，然后让各个品牌之间的设备可以联网。本文记录了docker安装方式。&lt;/p&gt;</summary>
    
    
    
    
    <category term="web" scheme="https://qs100371.vip/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>windows和linux双系统时间同步方案</title>
    <link href="https://qs100371.vip/post/windows-he-linux-shuang-xi-tong-shi-jian-tong-bu-fang-an/"/>
    <id>https://qs100371.vip/post/windows-he-linux-shuang-xi-tong-shi-jian-tong-bu-fang-an/</id>
    <published>2025-03-21T10:25:57.000Z</published>
    <updated>2025-03-21T10:52:17.396Z</updated>
    
    <content type="html"><![CDATA[<p>在双系统下，主机的时间经常会发生混乱，windows以硬件时间为当前时区时间，而linux通常以硬件时间为utc时间，对于+8时区，两者相差8小时。如果以windows为主系统，可以在linux下做以下设置。</p><span id="more"></span><p>windows系统时间设置不做改动。</p><h1 id="linux系统下设置"><a href="#linux系统下设置" class="headerlink" title="linux系统下设置"></a>linux系统下设置</h1><p><code>sudo timedatectl set-local-rtc 1 --adjust-system-clock</code></p><p>查看系统时间：<br><code>timedatectl </code><br>系统显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">               Local time: 五 2025-03-21 18:07:50 CST</span><br><span class="line">           Universal time: 五 2025-03-21 10:07:50 UTC</span><br><span class="line">                 RTC time: 五 2025-03-21 10:07:50</span><br><span class="line">                Time zone: Asia/Shanghai (CST, +0800)</span><br><span class="line">System clock synchronized: yes</span><br><span class="line">              NTP service: active</span><br><span class="line">warning: The system is configured to read the RTC time in the local time zone.</span><br><span class="line">         This mode cannot be fully supported. It will create various problems</span><br><span class="line">         with time zone changes and daylight saving time adjustments. The RTC</span><br><span class="line">         time is never updated, it relies on external facilities to maintain it.</span><br><span class="line">         If at all possible, use RTC in UTC by calling</span><br><span class="line">         &#x27;timedatectl set-local-rtc 0&#x27;.</span><br></pre></td></tr></table></figure><p>第一次回windows同步一下时间，之后再切换系统，时间不再混乱。<br>再回linux：<br><code>timedatectl </code><br>系统显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">               Local time: 五 2025-03-21 18:34:59 CST</span><br><span class="line">           Universal time: 五 2025-03-21 10:34:59 UTC</span><br><span class="line">                 RTC time: 五 2025-03-21 18:34:59</span><br><span class="line">                Time zone: Asia/Shanghai (CST, +0800)</span><br><span class="line">System clock synchronized: no</span><br><span class="line">              NTP service: active</span><br><span class="line">          RTC in local TZ: yes</span><br><span class="line"></span><br><span class="line">Warning: The system is configured to read the RTC time in the local time zone.</span><br><span class="line">         This mode cannot be fully supported. It will create various problems</span><br><span class="line">         with time zone changes and daylight saving time adjustments. The RTC</span><br><span class="line">         time is never updated, it relies on external facilities to maintain it.</span><br><span class="line">         If at all possible, use RTC in UTC by calling</span><br><span class="line">         &#x27;timedatectl set-local-rtc 0&#x27;.</span><br></pre></td></tr></table></figure><p>此处RTC时间和CST时间一致。<br>改回缺省设置：<br><code>timedatectl set-local-rtc 0</code>   #此处RTC时间是UTC时间。</p><blockquote><p>不同linux系统时间处理命令不同，ubuntu上面的hwclock在deepin23上就没有，也不能apt安装。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;在双系统下，主机的时间经常会发生混乱，windows以硬件时间为当前时区时间，而linux通常以硬件时间为utc时间，对于+8时区，两者相差8小时。如果以windows为主系统，可以在linux下做以下设置。&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://qs100371.vip/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>找到并杀掉 Linux 系统中的僵尸进程</title>
    <link href="https://qs100371.vip/post/zhao-dao-bing-sha-diao-linux-xi-tong-zhong-de-jiang-shi-jin-cheng/"/>
    <id>https://qs100371.vip/post/zhao-dao-bing-sha-diao-linux-xi-tong-zhong-de-jiang-shi-jin-cheng/</id>
    <published>2025-03-21T07:40:01.000Z</published>
    <updated>2025-03-22T02:03:21.195Z</updated>
    
    <content type="html"><![CDATA[<p>大部分 Linux 系统进程最大 PID 设置为 32768，如果过多僵尸进程导致其他重要任务没有 PID 可用，系统会发生崩溃。需要找到并杀死僵尸进程。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Welcome to Ubuntu 22.04.5 LTS (GNU/Linux 5.15.0-134-generic x86_64)</span><br><span class="line"></span><br><span class="line"> System information as of Fri Mar 21 10:38:43 AM CST 2025</span><br><span class="line"></span><br><span class="line">  System load:             0.02</span><br><span class="line">  Usage of /:              44.3% of 79.95GB</span><br><span class="line">  Memory usage:            17%</span><br><span class="line">  Swap usage:              1%</span><br><span class="line">  Processes:               180</span><br><span class="line">  Users logged in:         0</span><br><span class="line">  IPv4 address for ens133: 192.168.0.5</span><br><span class="line">  IPv6 address for ens133: 2409:8a04:2567:c580:2e0:4cff:fe36:127c</span><br><span class="line"></span><br><span class="line">  =&gt; There is 1 zombie process.</span><br><span class="line"></span><br><span class="line">Expanded Security Maintenance for Applications is not enabled.</span><br><span class="line"></span><br><span class="line">0 updates can be applied immediately.</span><br><span class="line"></span><br><span class="line">Enable ESM Apps to receive additional future security updates.</span><br><span class="line">See https://ubuntu.com/esm or run: sudo pro status</span><br><span class="line"></span><br><span class="line">Last login: Fri Mar 21 08:07:59 2025 from 192.168.0.14</span><br></pre></td></tr></table></figure><p>ssh登录主机，发现提示：”&#x3D;&gt; There is 1 zombie process.”</p><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p>进程是一个程序的运行实例。它可能运行在前端（比如有交互的进程），也可能运行在后端（比如无交互或自动运行的进程）。它可能是一个父进程（运行期间创建了其他进程），也可能是一个子进程（由其他进程所创建）。<br>在 Linux 系统中，除 PID 为 0 的第一个 init 进程（或 systemd）外，其余进程都有父进程。进程也可以拥有自己的子进程。<br>在终端中使用 pstree 命令查看进程的树型结构，能看到系统各个进程的“家族树”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">qs@ubuntu:~$pstree</span><br><span class="line">systemd─┬─ModemManager───2*[&#123;ModemManager&#125;]</span><br><span class="line">        ├─NetworkManager───2*[&#123;NetworkManager&#125;]</span><br><span class="line">        ├─agetty</span><br><span class="line">        ├─containerd───11*[&#123;containerd&#125;]</span><br><span class="line">        ├─containerd-shim─┬─s6-svscan─┬─s6-supervise───s6-linux-init-s</span><br><span class="line">        │                 │           ├─s6-supervise───s6-ipcserverd</span><br><span class="line">        │                 │           ├─s6-supervise───qbittorrent-nox───8*[&#123;qbittorrent-nox&#125;]</span><br><span class="line">        │                 │           ├─s6-supervise───busybox</span><br><span class="line">        │                 │           └─s6-supervise</span><br><span class="line">        │                 └─11*[&#123;containerd-shim&#125;]</span><br><span class="line">        ├─containerd-shim─┬─agent───5*[&#123;agent&#125;]</span><br><span class="line">        │                 └─11*[&#123;containerd-shim&#125;]</span><br><span class="line">        ├─containerd-shim─┬─node───10*[&#123;node&#125;]</span><br><span class="line">        │                 └─11*[&#123;containerd-shim&#125;]</span><br><span class="line">        ├─containerd-shim─┬─xlp─┬─xlp─┬─xlp─┬─xunlei-pan-cli-─┬─xunlei-pan-cli.───22*[&#123;xunlei-pan-cli.&#125;]</span><br><span class="line">        │                 │     │     │     │                 └─9*[&#123;xunlei-pan-cli-&#125;]</span><br><span class="line">        │                 │     │     │     └─10*[&#123;xlp&#125;]</span><br><span class="line">        │                 │     │     └─7*[&#123;xlp&#125;]</span><br><span class="line">        │                 │     └─7*[&#123;xlp&#125;]</span><br><span class="line">        │                 └─11*[&#123;containerd-shim&#125;]</span><br><span class="line">        ├─containerd-shim─┬─filebrowser───7*[&#123;filebrowser&#125;]</span><br><span class="line">        │                 └─11*[&#123;containerd-shim&#125;]</span><br><span class="line">        ├─cron</span><br><span class="line">        ├─dbus-daemon</span><br><span class="line">        ├─dockerd─┬─6*[docker-proxy───7*[&#123;docker-proxy&#125;]]</span><br><span class="line">        │         ├─docker-proxy───8*[&#123;docker-proxy&#125;]</span><br><span class="line">        │         ├─docker-proxy───6*[&#123;docker-proxy&#125;]</span><br><span class="line">        │         └─20*[&#123;dockerd&#125;]</span><br><span class="line">        ├─irqbalance───&#123;irqbalance&#125;</span><br><span class="line">        ├─jellyfin───16*[&#123;jellyfin&#125;]</span><br><span class="line">        ├─multipathd───6*[&#123;multipathd&#125;]</span><br><span class="line">        ├─networkd-dispat</span><br><span class="line">        ├─nmbd</span><br><span class="line">        ├─polkitd───2*[&#123;polkitd&#125;]</span><br><span class="line">        ├─rsyslogd───3*[&#123;rsyslogd&#125;]</span><br><span class="line">        ├─smbd─┬─cleanupd</span><br><span class="line">        │      ├─samba-bgqd</span><br><span class="line">        │      └─smbd-notifyd</span><br><span class="line">        ├─sshd───sshd───sshd───bash───pstree</span><br><span class="line">        ├─systemd───(sd-pam)</span><br><span class="line">        ├─systemd-journal</span><br><span class="line">        ├─systemd-logind</span><br><span class="line">        ├─systemd-network</span><br><span class="line">        ├─systemd-resolve</span><br><span class="line">        ├─systemd-udevd</span><br><span class="line">        ├─unattended-upgr───&#123;unattended-upgr&#125;</span><br><span class="line">        ├─v2ray───8*[&#123;v2ray&#125;]</span><br><span class="line">        ├─v2raya───8*[&#123;v2raya&#125;]</span><br><span class="line">        └─wpa_supplicant</span><br></pre></td></tr></table></figure><h1 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h1><p>子进程死亡后，它的父进程会接收到通知去执行一些清理操作，如释放内存之类。然而，若父进程并未察觉到子进程死亡，子进程就会进入到“ 僵尸(zombie)”状态。从父进程角度看，子进程仍然存在，即使子进程实际上已经死亡。这就是“ 僵尸进程(zombie process)”（也被称为“ 已消失进程(defunct process)”）是如何产生并存在于系统中的。<br>进程可能处于如下状态中的一种：<br>D &#x3D; 不可中断的休眠<br>I &#x3D; 空闲<br>R &#x3D; 运行中<br>S &#x3D; 休眠<br>T &#x3D; 被调度信号终止<br>t &#x3D; 被调试器终止<br>Z &#x3D; 僵尸状态<br>如何查看进程和它的当前状态呢？一个简单的方法是在终端中使用 top 命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">qs@ubuntu:~$top</span><br><span class="line">top - 15:46:57 up  4:27,  1 user,  load average: 0.02, 0.02, 0.00</span><br><span class="line">Tasks: 176 total,   1 running, 175 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.2 us,  0.1 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">MiB Mem :   3774.1 total,    548.7 free,    610.6 used,   2614.7 buff/cache</span><br><span class="line">MiB Swap:   3767.0 total,   3695.7 free,     71.2 used.   2829.9 avail Mem </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="https://qs100371.vip/post-images/1742543449493.webp"></p><h1 id="处理僵尸进程"><a href="#处理僵尸进程" class="headerlink" title="处理僵尸进程"></a>处理僵尸进程</h1><p>确定僵尸进程的相关信息，比如父进程ppid、僵尸进程的pid以及命令行等信息。可以执行如下命令：<br><code>ps -e -o stat,ppid,pid,cmd | egrep &#39;^[Zz]&#39;</code><br>说明：<br>ps：ps命令用于获取当前系统的进程信息<br>-e：参数用于列出所有的进程<br>-o：参数用于设定输出格式，这里只输出进程的stat(状态信息)、ppid(父进程pid)、pid（当前进程的pid)，cmd(即进程的可执行文件<br>egrep：是linux下的正则表达式工具：‘1’：这是正则表达式，表示第一个字符的位置，[Zz]，表示z或者大写的Z字母，即表示第一个字符为Z或者z开头的进程数据，只所以这样是因为僵尸进程的状态信息以Z或者z字母开头。<br>然后可以kill -9 父进程pid，假设父进程pid为 1024<br><code>kill -9 1024</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;大部分 Linux 系统进程最大 PID 设置为 32768，如果过多僵尸进程导致其他重要任务没有 PID 可用，系统会发生崩溃。需要找到并杀死僵尸进程。&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://qs100371.vip/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>scp和rsync基本用法与断点续传</title>
    <link href="https://qs100371.vip/post/scp-he-rsync-ji-ben-yong-fa-yu-duan-dian-xu-chuan/"/>
    <id>https://qs100371.vip/post/scp-he-rsync-ji-ben-yong-fa-yu-duan-dian-xu-chuan/</id>
    <published>2025-03-21T07:19:33.000Z</published>
    <updated>2025-03-21T07:29:17.360Z</updated>
    
    <content type="html"><![CDATA[<p>在远程服务器和本地之间传输文件，可以使用scp命令，也可以使用rsync。本文记录了两个命令的用法。</p><span id="more"></span><p>scp和rsync对比：scp节约资源，系统负荷小，但断点续传是个问题；rsync速度更快，断点续传方便，但系统负荷大，尤其是传输很多文件的时候，硬盘I&#x2F;O非常高。</p><h1 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h1><p><code>scp [OPTION] SRC DEST</code><br>常用参数：<br>-r：递归拷贝目录<br>-q：不显示进度<br>-l：限制传输带宽，单位是kbits&#x2F;s<br><code>scp -r -l 200 /home/user/exampledir user@192.168.XXX.XXX:/home/user/</code><br>系统会要求输入user在192.168.XXX.XXX的登录密码，密码正确后就开始复制，scp默认显示复制进度。<br>如果经常在两个服务器之间拷贝文件，就需要一个非常有用的技术：scp免密码拷贝文件。</p><h1 id="rsync"><a href="#rsync" class="headerlink" title="rsync"></a>rsync</h1><p><code>rsync [OPTION] SRC DEST</code><br>常用参数：<br>–progress： 显示拷贝进度。<br>–partial：保留不完整文件，实现断点续传。<br>–partial-dir&#x3D;DIR：指定不完整文件的存储目录，而不是默认存储到目的地目录。<br>-P：包含–progress和–partial<br>–rsh&#x3D;ssh：使用ssh方式传输文件，注意：如果之前设置过ssh免密码登录，那么此时也就不需要密码，非常方便。<br>-v：显示详细信息。<br>-a：归档模式。也就是以递归方式传输文件，并保持所有文件属性。<br>-r：递归方式传输文件。<br>本地复制文件：<br><code>rsync -av --progress SRC DEST</code></p><h1 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h1><p><code>rsync -P --rsh=ssh qs@192.168.0.2:/home/test.mp4 /root</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在远程服务器和本地之间传输文件，可以使用scp命令，也可以使用rsync。本文记录了两个命令的用法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://qs100371.vip/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>安装Jellyfin</title>
    <link href="https://qs100371.vip/post/an-zhuang-jellyfin/"/>
    <id>https://qs100371.vip/post/an-zhuang-jellyfin/</id>
    <published>2025-03-19T09:46:54.000Z</published>
    <updated>2025-03-20T07:43:02.266Z</updated>
    
    <content type="html"><![CDATA[<p>Jellyfin是一个开源的媒体系统，是Emby 和 Plex的替代方案，后两者功能类似但都要收费。本文记录了deb和docker两种安装方式。</p><span id="more"></span><p>Jellyfin可以将所有的电影、电视剧、动漫、漫画、书籍、音乐等放进去，然后在所有的平台上免费观看，进度是同步的。还可以设置「刮削器」，把影片信息从网上下载整理好放到旁边，整个过程是自动的。如果在通勤的路上想要看电影，Jellyfin也可以硬件加速转码，帮助提高视频流畅度，同时节省流量。</p><h1 id="脚本安装"><a href="#脚本安装" class="headerlink" title="脚本安装"></a>脚本安装</h1><p><code>curl -s https://repo.jellyfin.org/install-debuntu.sh | bash</code></p><blockquote><p>Determining optimal repository settings.</p></blockquote><p>Found the following details from ‘&#x2F;etc&#x2F;os-release’:<br> Real OS:            debian<br> Repository OS:      debian<br> Repository Release: bookworm<br> CPU Architecture:   armhf<br>If this looks correct, press <Enter> now to continue installing Jellyfin.</p><blockquote><p>Fetching repository signing key.</p></blockquote><blockquote><p>Installing Jellyfin repository into APT.</p></blockquote><p>Types: deb<br>URIs: <a href="https://repo.jellyfin.org/debian">https://repo.jellyfin.org/debian</a><br>Suites: bookworm<br>Components: main<br>Architectures: armhf<br>Signed-By: &#x2F;etc&#x2F;apt&#x2F;keyrings&#x2F;jellyfin.gpg<br> .<br> .<br> .</p><p>You should see the service as ‘active (running)’ above. If not, use <a href="https://jellyfin.org/contact">https://jellyfin.org/contact</a> to find us for troubleshooting.</p><p>You can access your new instance now at <a href="http://192.168.0.2:8096/">http://192.168.0.2:8096</a> in your web browser to finish setting up Jellyfin.</p><p>Thank you for installing Jellyfin, and happy watching!</p><blockquote><p>从<a href="http://192.168.0.2:8096访问">http://192.168.0.2:8096访问</a></p></blockquote><p><img src="https://qs100371.vip/post-images/1733404168656.webp"><br><img src="https://qs100371.vip/post-images/1733404175190.webp"><br><img src="https://qs100371.vip/post-images/1733404181813.webp"></p><p>电视源就是之前在本地建立的。</p><h1 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker pull jellyfin/jellyfin:latest  # or docker pull ghcr.io/jellyfin/jellyfin:latest</span><br><span class="line">mkdir -p /data/jellyfin/&#123;config,cache&#125;</span><br><span class="line">mkdir /data/media</span><br><span class="line">docker run -d -v /data/jellyfin/config:/config \</span><br><span class="line">-v /data/jellyfin/cache:/cache -v /data/media:/media \</span><br><span class="line">--net=host jellyfin/jellyfin:latest </span><br></pre></td></tr></table></figure><p>同样是从8096端口访问。<br><img src="https://qs100371.vip/post-images/1733405630235.webp"><br><img src="https://qs100371.vip/post-images/1742381208773.webp"><br><img src="https://qs100371.vip/post-images/1742381213949.webp"><br><img src="https://qs100371.vip/post-images/1742384767860.webp"><br><img src="https://qs100371.vip/post-images/1742384774082.webp"><br><img src="https://qs100371.vip/post-images/1742381228395.webp"></p><blockquote><p>jellyfin在windows、linux、armbian上都可以安装。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;Jellyfin是一个开源的媒体系统，是Emby 和 Plex的替代方案，后两者功能类似但都要收费。本文记录了deb和docker两种安装方式。&lt;/p&gt;</summary>
    
    
    
    
    <category term="web" scheme="https://qs100371.vip/tags/web/"/>
    
    <category term="linux" scheme="https://qs100371.vip/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux下的时间设置和同步</title>
    <link href="https://qs100371.vip/post/linux-xia-de-shi-jian-she-zhi-he-tong-bu/"/>
    <id>https://qs100371.vip/post/linux-xia-de-shi-jian-she-zhi-he-tong-bu/</id>
    <published>2025-03-17T09:33:29.000Z</published>
    <updated>2025-03-17T10:45:25.270Z</updated>
    
    <content type="html"><![CDATA[<p>在双系统下，主机的时间经常会发生混乱，windows以硬件时间为当前时区时间，而linux通常以硬件时间为utc时间，对于+8时区，两者相差8小时。本文介绍了linux下时间的设置和同步。</p><span id="more"></span><p>在Linux下，系统时间和硬件时间并不会自动同步。在Linux运行过程中，系统时间和硬件时间以异步的方式运行，互不干扰。硬件时间的运行，是靠BIOS电池来维持，而系统时间，是用CPU来维持的。在系统开机的时候，会自动从BIOS中取得硬件时间，设置为系统时间。</p><h1 id="常用的时间操作命令"><a href="#常用的时间操作命令" class="headerlink" title="常用的时间操作命令"></a>常用的时间操作命令</h1><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>date命令</td><td>查看系统时间，设置时间</td></tr><tr><td>hwclock命令</td><td>查看硬件时间，可以让系统时间和硬件时间的同步</td></tr><tr><td>ntpdate命令</td><td>可以让不同机器之间同步时间</td></tr></tbody></table><h1 id="系统时间设置"><a href="#系统时间设置" class="headerlink" title="系统时间设置"></a>系统时间设置</h1><p><code>date</code>    &#x2F;&#x2F;查看系统时间<br>Mon Mar 17 05:45:59 PM CST 2025<br><code>sudo date -s &quot;20250316 16:00:00&quot; </code>  &#x2F;&#x2F;修改系统时间（yyyymmdd hh:mm:ss）<br>Sun Mar 16 04:00:00 PM CST 2025</p><h1 id="硬件时间设置"><a href="#硬件时间设置" class="headerlink" title="硬件时间设置"></a>硬件时间设置</h1><p><code>sudo hwclock</code>       &#x2F;&#x2F;查看硬件时间(hwclock –show 或hwclock -r也可以），需要sudo<br>2025-03-17 17:50:57.997658+08:00<br><code>sudo hwclock --set --date &quot;20250317 20:00:00&quot;</code>   &#x2F;&#x2F;设置硬件时间</p><h1 id="系统时间和硬件时间的同步"><a href="#系统时间和硬件时间的同步" class="headerlink" title="系统时间和硬件时间的同步"></a>系统时间和硬件时间的同步</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo hwclock --systohc   //以系统时间同步硬件时间</span><br><span class="line">sudo hwclock -w          //以系统时间同步硬件时间</span><br><span class="line">sudo hwclock --hctosys    //以硬件时间同步系统时间</span><br><span class="line">sudo hwclock -s</span><br></pre></td></tr></table></figure><h1 id="NTP服务器时间的同步"><a href="#NTP服务器时间的同步" class="headerlink" title="NTP服务器时间的同步"></a>NTP服务器时间的同步</h1><p>通常可以使用ntpdate命令或者ntpd服务来同步时间。</p><ul><li>ntpdate同步<br>ntpdate没有的话需要<code>apt install ntpdate</code><br><code>sudo ntpdate 0.ubuntu.pool.ntp.org</code> &#x2F;&#x2F;同步服务器时间<br>17 Mar 17:59:03 ntpdate[5663]: adjust time server 78.46.102.180 offset -0.073819 sec</li><li>定时任务里的时间同步<br>在crontab中添加：每天的12点同步时间<br><code>0 12 * * * /usr/sbin/ntpdate 0.ubuntu.pool.ntp.org</code></li><li>ntp服务同步<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ntp</span><br><span class="line">sudo systemctl start ntp</span><br><span class="line">sudo systemctl status ntp</span><br></pre></td></tr></table></figure><img src="https://qs100371.vip/post-images/1742206635246.webp"><br>设置文件为&#x2F;etc&#x2F;ntp.conf，时间服务器已经预先设置好了。<br><img src="https://qs100371.vip/post-images/1742206644258.webp"></li></ul><p>时区设置参见：<a href="https://qs100371.vip/post/ubuntu-shang-xiu-gai-xi-tong-shi-qu-de-fang-fa/"><em>Ubuntu上修改系统时区的方法</em></a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在双系统下，主机的时间经常会发生混乱，windows以硬件时间为当前时区时间，而linux通常以硬件时间为utc时间，对于+8时区，两者相差8小时。本文介绍了linux下时间的设置和同步。&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://qs100371.vip/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>影音播放系统Emby</title>
    <link href="https://qs100371.vip/post/ying-yin-bo-fang-xi-tong-emby/"/>
    <id>https://qs100371.vip/post/ying-yin-bo-fang-xi-tong-emby/</id>
    <published>2025-03-12T13:19:24.000Z</published>
    <updated>2025-03-14T07:33:26.771Z</updated>
    
    <content type="html"><![CDATA[<p>Emby是一款优秀的媒体服务器软件，致力于为用户提供丰富的多媒体体验。通过Emby，可以方便地在家庭内的各种设备上观看喜爱的电影、电视剧和其他视频内容。而且，Emby还具备强大的媒体管理功能，让影视资源井然有序，随时随地畅享观影乐趣。</p><span id="more"></span><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>docker-compose.yml：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;2.3&quot;</span><br><span class="line">services:</span><br><span class="line">  emby:</span><br><span class="line">    image: emby/embyserver</span><br><span class="line">    container_name: embyserver</span><br><span class="line">    #runtime: nvidia # Expose NVIDIA GPUs</span><br><span class="line">    #network_mode: host # Enable DLNA and Wake-on-Lan</span><br><span class="line">    environment:</span><br><span class="line">      - UID=1000 # The UID to run emby as (default: 2)</span><br><span class="line">      - GID=100 # The GID to run emby as (default 2)</span><br><span class="line">      - GIDLIST=100 # A comma-separated list of additional GIDs to run emby as (default: 2)</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/emby:/config # Configuration directory</span><br><span class="line">      - /data/bank/tvshows:/mnt/share1 # Media directory</span><br><span class="line">      - /data/bank/bt:/mnt/share2 # Media directory</span><br><span class="line">    ports:</span><br><span class="line">      - 8096:8096 # HTTP port</span><br><span class="line">      - 8920:8920 # HTTPS port</span><br><span class="line">    #devices:</span><br><span class="line">      #- /dev/dri:/dev/dri # VAAPI/NVDEC/NVENC render nodes</span><br><span class="line">      #- /dev/vchiq:/dev/vchiq # MMAL/OMX on Raspberry Pi</span><br><span class="line">    restart: unless-stopped</span><br></pre></td></tr></table></figure><p>从ip:8096访问。<br><img src="https://qs100371.vip/post-images/1741786606877.webp"><br><img src="https://qs100371.vip/post-images/1741786612004.webp"><br><img src="https://qs100371.vip/post-images/1741786616144.webp"><br><img src="https://qs100371.vip/post-images/1741786620416.webp"><br><img src="https://qs100371.vip/post-images/1741786625010.webp"><br><img src="https://qs100371.vip/post-images/1741786629454.webp"><br><img src="https://qs100371.vip/post-images/1741786634060.webp"><br><img src="https://qs100371.vip/post-images/1741786641680.webp"><br><img src="https://qs100371.vip/post-images/1741786637859.webp"><br><img src="https://qs100371.vip/post-images/1741937557335.webp"><br><img src="https://qs100371.vip/post-images/1741937564501.webp"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Emby是一款优秀的媒体服务器软件，致力于为用户提供丰富的多媒体体验。通过Emby，可以方便地在家庭内的各种设备上观看喜爱的电影、电视剧和其他视频内容。而且，Emby还具备强大的媒体管理功能，让影视资源井然有序，随时随地畅享观影乐趣。&lt;/p&gt;</summary>
    
    
    
    
    <category term="web" scheme="https://qs100371.vip/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>下载工具Transmission</title>
    <link href="https://qs100371.vip/post/xia-zai-gong-ju-transmission/"/>
    <id>https://qs100371.vip/post/xia-zai-gong-ju-transmission/</id>
    <published>2025-03-12T09:25:37.000Z</published>
    <updated>2025-03-12T09:42:35.817Z</updated>
    
    <content type="html"><![CDATA[<p>Transmission是一个免费的bittorrent客户端。可部署在docker中。</p><span id="more"></span><p>官网：<a href="https://transmissionbt.com/">https://transmissionbt.com/</a><br>项目地址：<a href="https://github.com/linuxserver/docker-transmission">linuxserver&#x2F;docker-transmission</a></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>docker-compose.yml：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">services:</span><br><span class="line"> transmission:</span><br><span class="line">   image: lscr.io/linuxserver/transmission:latest</span><br><span class="line">   container_name: transmission</span><br><span class="line">   environment:</span><br><span class="line">     - PUID=1000</span><br><span class="line">     - PGID=1000</span><br><span class="line">     - TZ=Etc/UTC</span><br><span class="line">   volumes:</span><br><span class="line">     - /data/transmission:/config</span><br><span class="line">     - /data/bank/bt:/downloads #optional</span><br><span class="line">   ports:</span><br><span class="line">     - 9091:9091</span><br><span class="line">     - 51413:51413</span><br><span class="line">     - 51413:51413/udp</span><br><span class="line">   restart: unless-stopped</span><br></pre></td></tr></table></figure><p>   从ip:9091访问。<br>   <img src="https://qs100371.vip/post-images/1741772514315.webp"><br>   <img src="https://qs100371.vip/post-images/1741772520474.webp"><br>   <img src="https://qs100371.vip/post-images/1741772525402.webp"><br>   <img src="https://qs100371.vip/post-images/1741772529717.webp"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Transmission是一个免费的bittorrent客户端。可部署在docker中。&lt;/p&gt;</summary>
    
    
    
    
    <category term="web" scheme="https://qs100371.vip/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>docker里的迅雷</title>
    <link href="https://qs100371.vip/post/docker-li-de-xun-lei/"/>
    <id>https://qs100371.vip/post/docker-li-de-xun-lei/</id>
    <published>2025-03-11T13:42:45.000Z</published>
    <updated>2025-03-17T04:26:17.316Z</updated>
    
    <content type="html"><![CDATA[<p>有大神将NAS版迅雷移植到了Docker中，从而实现Docker容器即可安装NAS版迅雷。</p><span id="more"></span><p>迅雷在早些时期已经支持NAS安装，不过从官网的介绍来看仅支持“群晖&#x2F;威联通”等主流NAS设备，且需要内测邀请，并没有直接支持Docker安装，具体见官网：<a href="https://nas.xunlei.com/">https://nas.xunlei.com/</a><br><img src="https://qs100371.vip/post-images/1741701398926.webp"></p><p>项目地址：<a href="https://github.com/cnk3x/xunlei">cnk3x&#x2F;xunlei</a></p><p>从迅雷群晖套件中提取出来用于其他设备的迅雷远程下载服务程序。仅提供 Linux 模拟和容器化运行环境，未对原版迅雷程序进行任何修改。</p><h1 id="部署NAS版迅雷"><a href="#部署NAS版迅雷" class="headerlink" title="部署NAS版迅雷"></a>部署NAS版迅雷</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line"> --name=xunlei \</span><br><span class="line"> -p 2345:2345 \</span><br><span class="line"> -v /data/xunlei:/xunlei/data \</span><br><span class="line"> -v /data/bank/bt:/xunlei/downloads \</span><br><span class="line"> --restart=unless-stopped \</span><br><span class="line"> --privileged \</span><br><span class="line"> cnk3x/xunlei:latest</span><br></pre></td></tr></table></figure><p> 或<br> docker-compose.yml<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> version: &#x27;3.9&#x27;</span><br><span class="line">services:</span><br><span class="line">   xunlei:</span><br><span class="line">       container_name: xunlei</span><br><span class="line">       image: &#x27;cnk3x/xunlei:latest&#x27;</span><br><span class="line">       privileged: true</span><br><span class="line">       restart: unless-stopped</span><br><span class="line">       volumes:</span><br><span class="line">           - &#x27;/data/bank/bt:/xunlei/downloads&#x27;</span><br><span class="line">           - &#x27;/data/xunlei:/xunlei/data&#x27;</span><br><span class="line">       ports:</span><br><span class="line">           - &#x27;2345:2345&#x27;</span><br></pre></td></tr></table></figure><br>  从ip:2345访问。</p><h1 id="初始化NAS版迅雷"><a href="#初始化NAS版迅雷" class="headerlink" title="初始化NAS版迅雷"></a>初始化NAS版迅雷</h1><p> 下载迅雷APP，扫码登录NAS版迅雷（不登录不让用），还可以通过APP远程管理，如果不需要远程管理，也可以直接在<a href="http://IP:2345页面通过账号密码登录。">http://IP:2345页面通过账号密码登录。</a></p><ul><li>NAS版迅雷安装并登录后还需要内测邀请码[迅雷牛通]才能正常使用。</li></ul><h1 id="使用NAS版迅雷"><a href="#使用NAS版迅雷" class="headerlink" title="使用NAS版迅雷"></a>使用NAS版迅雷</h1><p>NAS版迅雷比较简洁，除了基本的下载功能外，还支持云盘取回&#x2F;影片库&#x2F;在线播放等功能，如果您安装了手机APP，还可以进行远程管理，非常方便。<br><img src="https://qs100371.vip/post-images/1741701121329.webp"><br><img src="https://qs100371.vip/post-images/1741701127702.webp"><br><img src="https://qs100371.vip/post-images/1741701134547.webp"></p><blockquote><p>没有会员下载速度也不错。不过迅雷在下载界名声比较臭，万不得已的情况下可以用一下。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;有大神将NAS版迅雷移植到了Docker中，从而实现Docker容器即可安装NAS版迅雷。&lt;/p&gt;</summary>
    
    
    
    
    <category term="web" scheme="https://qs100371.vip/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>SyncTV：远程一起观看电影和直播</title>
    <link href="https://qs100371.vip/post/synctvyuan-cheng-yi-qi-guan-kan-dian-ying-he-zhi-bo/"/>
    <id>https://qs100371.vip/post/synctvyuan-cheng-yi-qi-guan-kan-dian-ying-he-zhi-bo/</id>
    <published>2025-03-10T07:42:05.000Z</published>
    <updated>2025-03-11T00:10:42.909Z</updated>
    
    <content type="html"><![CDATA[<p>SyncTV 是一个远程一起观看电影和直播的程序，提供了同步观影、直播、聊天等功能。可以与朋友和家人一起观看视频和直播。</p><p>SyncTV 的同步观影功能确保所有观看视频的人都在同一点上。这意味着可以暂停、快进快退、倍速等操作，其他人也会同步到同一点。</p><span id="more"></span><p>项目地址：<a href="https://github.com/synctv-org/synctv/">synctv-org&#x2F;synctv</a></p><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul><li>同步观看<br> 视频同步  直播同步  影院模式</li><li>聊天<br> 弹幕</li><li>代理<br> 视频代理  直播代理  代理缓存</li><li>视频解析<br> Alist  Bilibili  Emby</li><li>直播解析<br> 哔哩哔哩</li><li>WebRTC 在线通话<br> 语音  视频  屏幕共享</li></ul><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p> <code>docker run -d --name --restart unless-stopped synctv -v /data/synctv:/root/.synctv -p 83:8080 synctvorg/synctv</code><br> <img src="https://qs100371.vip/post-images/1741592850429.webp"><br> <img src="https://qs100371.vip/post-images/1741592856161.webp"><br> 右下角添加视频：<br> <img src="https://qs100371.vip/post-images/1741596077156.webp"><br> <img src="https://qs100371.vip/post-images/1741592864679.webp"><br> <img src="https://qs100371.vip/post-images/1741592870525.webp"><br><img src="https://qs100371.vip/post-images/1741592875365.webp"><br><img src="https://qs100371.vip/post-images/1741592882609.webp"><br>手机远程访问：<br><img src="https://qs100371.vip/post-images/1741595553089.webp"></p><blockquote><p>主机上没有emby或alist，只是随便用了一条B站新闻的链接，可以直接解析并共享播放。用lucly stun内网穿透来访问，视频还是有几秒的延迟的。不过这种也不能要求太高了。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;SyncTV 是一个远程一起观看电影和直播的程序，提供了同步观影、直播、聊天等功能。可以与朋友和家人一起观看视频和直播。&lt;/p&gt;
&lt;p&gt;SyncTV 的同步观影功能确保所有观看视频的人都在同一点上。这意味着可以暂停、快进快退、倍速等操作，其他人也会同步到同一点。&lt;/p&gt;</summary>
    
    
    
    
    <category term="web" scheme="https://qs100371.vip/tags/web/"/>
    
  </entry>
  
</feed>
